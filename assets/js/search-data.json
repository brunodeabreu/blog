{
  
    
        "post0": {
            "title": "Doar Sangue salva vidas",
            "content": "&lt;img style=&quot;float: left;margin:5px 20px 3px 1px &quot; src=&quot;img/sangue1.jpg&quot; width=&quot;300&quot;&quot;&gt; . Doar sangue salva vidas, isso é divulgado nas mídias sociais, além de ser utilizado para procedimentos e intervenções médicas é utilizado no tratamento de diversas doenças crônicas. . Constantemente os bancos de sangue estão com estoques abaixo da normalidade, principalmente durantes os meses de férias. Com isso Ministério da Saúde reforça periodicamente a importância de adotar uma cultura solidária da doação regular e espontânea de sangue. Mas na prática poucos buscam os postos de doação de forma voluntária, normalmente é incentivado quando um parente ou amigo solicita doação. . Como a doação é voluntárias é difícil para os centros de hemoterapia e hospitais saberem quando um doador irá retornar para doar sangue . Explorando os dados . O dataset . Este conjunto de dados foi doado pelo Blood Transfusion Service Center na cidade de Hsin-Chu City em Taiwan em 2008, infelizmente não encontrei nenhuma fonte de dados abertos com algo similar. . Este dataset é disponibilizado pelo UCI-Blood Transfusion Service Center Data Set e 2019 drivendata.org promoveu uma competição com o tema Warm Up: Predict Blood Donations . #collapse-hide import pandas as pd . . #collapse-hide cols = [&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;target&#39;] df = pd.read_csv(&#39;data/transfusion.data&#39;, names=cols, header=0) df.head() . . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 748 entries, 0 to 747 Data columns (total 5 columns): rec 748 non-null int64 frec 748 non-null int64 total 748 non-null int64 time 748 non-null int64 target 748 non-null int64 dtypes: int64(5) memory usage: 29.3 KB . Descri&#231;&#227;o das Vari&#225;veis: . O dataset contem 749 linhas com dados de dodores com os seguintes dados: . rec : meses desde a última doação | fre: total número de doações | total : Total de sangue doado | time : meses desde primeira doação | target : Informação se foi doado ou não | . Explorando . df.head() . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . #collapse-hide df.total.value_counts() . . 250 158 500 112 750 87 1000 62 1250 62 1500 52 1750 43 2000 31 2250 24 2750 22 2500 14 3000 14 4000 13 3500 13 3250 9 3750 6 4250 4 6000 3 4750 2 5250 2 5500 2 5000 2 8250 1 12500 1 9500 1 11500 1 5750 1 8500 1 6500 1 4500 1 11000 1 10750 1 10250 1 Name: total, dtype: int64 . #collapse-show df.describe() . . rec frec total time target . count | 748.000000 | 748.000000 | 748.000000 | 748.000000 | 748.000000 | . mean | 9.506684 | 5.514706 | 1378.676471 | 34.282086 | 0.237968 | . std | 8.095396 | 5.839307 | 1459.826781 | 24.376714 | 0.426124 | . min | 0.000000 | 1.000000 | 250.000000 | 2.000000 | 0.000000 | . 25% | 2.750000 | 2.000000 | 500.000000 | 16.000000 | 0.000000 | . 50% | 7.000000 | 4.000000 | 1000.000000 | 28.000000 | 0.000000 | . 75% | 14.000000 | 7.000000 | 1750.000000 | 50.000000 | 0.000000 | . max | 74.000000 | 50.000000 | 12500.000000 | 98.000000 | 1.000000 | . #collapse-show df.total.value_counts(normalize=True).plot(kind=&#39;barh&#39;) plt.show() . . #collapse-hide df.groupby(&#39;frec&#39;)[&#39;total&#39;].mean() . . frec 1 250 2 500 3 750 4 1000 5 1250 6 1500 7 1750 8 2000 9 2250 10 2500 11 2750 12 3000 13 3250 14 3500 15 3750 16 4000 17 4250 18 4500 19 4750 20 5000 21 5250 22 5500 23 5750 24 6000 26 6500 33 8250 34 8500 38 9500 41 10250 43 10750 44 11000 46 11500 50 12500 Name: total, dtype: int64 . #collapse-hide import matplotlib.pyplot as plt import seaborn as sns . . Rela&#231;&#245;es . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb271dc50&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, hue=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26e7650&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, col=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26a9990&gt; . Residuais . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0d3c3d0&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c82810&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c037d0&gt; . Reg . #collapse-show plt.scatter(df.time, df.total, label=&#39;data&#39;, color=&#39;red&#39;, marker=&#39;o&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;blue&#39;, scatter=None, label=&#39;1st Order&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;green&#39;, order=2 ,scatter=None, label=&#39;2nd Order&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0be4d90&gt; . Distribui&#231;&#227;o Multivariada . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb0af1b10&gt; . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, kind=&#39;kde&#39;) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb099b050&gt; . Pairplot . #collapse-hide sns.pairplot(df) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffbb0a9a8d0&gt; . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide binned = fast_linbin(X, a, b, gridsize) / (delta * nobs) /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars FAC1 = 2*(np.pi*bw/RANGE)**2 . &lt;seaborn.axisgrid.PairGrid at 0x7ffba3ab9650&gt; . Feature Eng . #collapse-show df[&#39;time_frec&#39;] = df.time / df.frec df[&#39;time_rec&#39;] = df.time - df.rec df[&#39;total_time&#39;] = df.total / df.time df.sample(5) . . rec frec total time target time_frec time_rec total_time . 7 | 1 | 12 | 3000 | 35 | 0 | 2.916667 | 34 | 85.714286 | . 37 | 4 | 6 | 1500 | 16 | 1 | 2.666667 | 12 | 93.750000 | . 242 | 4 | 3 | 750 | 25 | 1 | 8.333333 | 21 | 30.000000 | . 49 | 2 | 2 | 500 | 2 | 0 | 1.000000 | 0 | 250.000000 | . 469 | 11 | 2 | 500 | 70 | 0 | 35.000000 | 59 | 7.142857 | . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffba0e1d3d0&gt; . Save DataFrame to picckle . df.to_pickle(&#39;data/dados.pkl&#39;) . Modelagem . import pickle pickle_in = open(&quot;data/dados.pkl&quot;,&quot;rb&quot;) data = pickle.load(pickle_in) . x = data[[&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;time_frec&#39;, &#39;time_rec&#39;,&#39;total_time&#39;]] y = data.target . # Split from sklearn.model_selection import train_test_split X_train, X_valid, y_train, y_valid = train_test_split(x, y, test_size=0.33, random_state=42) . GaussianNB - acc 70% . #collapse-show from sklearn import datasets from sklearn import metrics from sklearn.naive_bayes import GaussianNB # Classificador clf = GaussianNB() # Modelo modelo = clf.fit(X_train, y_train) print(modelo) # Previsões previsto = modelo.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . GaussianNB(priors=None, var_smoothing=1e-09) precision recall f1-score support 0 0.77 0.85 0.81 181 1 0.43 0.30 0.35 66 accuracy 0.70 247 macro avg 0.60 0.58 0.58 247 weighted avg 0.68 0.70 0.69 247 [[154 27] [ 46 20]] . Logistic Regression - acc 74% . #collapse-show from sklearn.linear_model import LogisticRegressionCV from sklearn import metrics #classifier clf = LogisticRegressionCV(cv=5, random_state=0).fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . LogisticRegressionCV(Cs=10, class_weight=None, cv=5, dual=False, fit_intercept=True, intercept_scaling=1.0, l1_ratios=None, max_iter=100, multi_class=&#39;warn&#39;, n_jobs=None, penalty=&#39;l2&#39;, random_state=0, refit=True, scoring=None, solver=&#39;lbfgs&#39;, tol=0.0001, verbose=0) precision recall f1-score support 0 0.75 0.98 0.85 181 1 0.60 0.09 0.16 66 accuracy 0.74 247 macro avg 0.67 0.53 0.50 247 weighted avg 0.71 0.74 0.66 247 [[177 4] [ 60 6]] . SVM - acc 73% . #collapse-show from sklearn import svm from sklearn import metrics #classifier clf = svm.SVC().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto_deprecated&#39;, kernel=&#39;rbf&#39;, max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) precision recall f1-score support 0 0.74 0.97 0.84 181 1 0.50 0.09 0.15 66 accuracy 0.73 247 macro avg 0.62 0.53 0.50 247 weighted avg 0.68 0.73 0.66 247 [[175 6] [ 60 6]] . /home/bruno/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . Tree - acc 67% . #collapse-show from sklearn import tree #classifier clf = tree.DecisionTreeClassifier().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=False, random_state=None, splitter=&#39;best&#39;) precision recall f1-score support 0 0.76 0.81 0.78 181 1 0.36 0.29 0.32 66 accuracy 0.67 247 macro avg 0.56 0.55 0.55 247 weighted avg 0.65 0.67 0.66 247 [[147 34] [ 47 19]] .",
            "url": "https://brunodeabreu.github.io/blog/jupyter/2020/03/28/Doacao-Sangue.html",
            "relUrl": "/jupyter/2020/03/28/Doacao-Sangue.html",
            "date": " • Mar 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://brunodeabreu.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Meu nome é Bruno sou DBA especializado em Db2 nas plataformas Unix e Linux, estudante de estatística, ciência de dados e inteligência artificial, o principal objetivo deste blog é compartilhar notas e cursos e jupyter notebooks de projetos. . Me formei em ciência da computação pela Universidade Fumec em 2007, em 2008 iniciei minha tragetória na IBM Brasil atuando como DBA Db2 para clientes em todo o mundo. . Em 2016 comecei a estudar sobre Ciência de dados, completei o programa de Pós-Graduação da PUC-MG em Big Data e Ciência de Dados em 2019 e desde então me dedico a estudar sobre machine learning, deep learning, inteligência artificial através de diversas plataformas como Coursera, EdX, Data Science Academy e Datacamp. .",
          "url": "https://brunodeabreu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}