{
  
    
        "post0": {
            "title": "Descobrindo 5 funções no Pytorch",
            "content": ". Fun&#231;&#245;es estudadas neste notebook . torch.chain_matmul | torch.cumprod | torch.det | torch.flatten | torch.lu | . Imports . Como neste notebook vou explorar 5 funções do pytorch nesta sessão de Imports foi importado somente a lib torch . #collapse-hide # Import torch and other required modules import torch . . Para descobrir novas funções utilizei o comando dir(&lt;lib&gt;) que listou todas as funções e o comando help(torch.&lt;func&gt;) para conhecer mais sobre ela. . #collapse-hide print(&#39;Temos : &#39; + str(len(dir(torch))) + &#39; funções para explorar&#39;) dir(torch) . . Temos : 646 funções para explorar . [&#39;AVG&#39;, &#39;AggregationType&#39;, &#39;Argument&#39;, &#39;ArgumentSpec&#39;, &#39;Block&#39;, &#39;BoolStorage&#39;, &#39;BoolTensor&#39;, &#39;BoolType&#39;, &#39;ByteStorage&#39;, &#39;ByteTensor&#39;, &#39;CharStorage&#39;, &#39;CharTensor&#39;, &#39;Code&#39;, &#39;CompilationUnit&#39;, &#39;CompleteArgumentSpec&#39;, &#39;CudaBoolStorageBase&#39;, &#39;CudaByteStorageBase&#39;, &#39;CudaCharStorageBase&#39;, &#39;CudaDoubleStorageBase&#39;, &#39;CudaFloatStorageBase&#39;, &#39;CudaHalfStorageBase&#39;, &#39;CudaIntStorageBase&#39;, &#39;CudaLongStorageBase&#39;, &#39;CudaShortStorageBase&#39;, &#39;DictType&#39;, &#39;DoubleStorage&#39;, &#39;DoubleTensor&#39;, &#39;ExecutionPlanState&#39;, &#39;ExtraFilesMap&#39;, &#39;FatalError&#39;, &#39;FileCheck&#39;, &#39;FloatStorage&#39;, &#39;FloatTensor&#39;, &#39;FloatType&#39;, &#39;Function&#39;, &#39;FunctionSchema&#39;, &#39;Future&#39;, &#39;Generator&#39;, &#39;Gradient&#39;, &#39;Graph&#39;, &#39;GraphExecutorState&#39;, &#39;HalfStorage&#39;, &#39;HalfStorageBase&#39;, &#39;HalfTensor&#39;, &#39;IODescriptor&#39;, &#39;IntStorage&#39;, &#39;IntTensor&#39;, &#39;IntType&#39;, &#39;JITException&#39;, &#39;ListType&#39;, &#39;LockingLogger&#39;, &#39;LoggerBase&#39;, &#39;LongStorage&#39;, &#39;LongTensor&#39;, &#39;Node&#39;, &#39;NoopLogger&#39;, &#39;NumberType&#39;, &#39;OptionalType&#39;, &#39;PyTorchFileReader&#39;, &#39;PyTorchFileWriter&#39;, &#39;SUM&#39;, &#39;ScriptMethod&#39;, &#39;ScriptModule&#39;, &#39;ShortStorage&#39;, &#39;ShortTensor&#39;, &#39;Size&#39;, &#39;Storage&#39;, &#39;StringType&#39;, &#39;Tensor&#39;, &#39;TensorType&#39;, &#39;TracingState&#39;, &#39;TupleType&#39;, &#39;Type&#39;, &#39;Use&#39;, &#39;Value&#39;, &#39;_C&#39;, &#39;_StorageBase&#39;, &#39;__all__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__config__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__path__&#39;, &#39;__spec__&#39;, &#39;__version__&#39;, &#39;_adaptive_avg_pool2d&#39;, &#39;_baddbmm_mkl_&#39;, &#39;_batch_norm_impl_index&#39;, &#39;_cast_Byte&#39;, &#39;_cast_Char&#39;, &#39;_cast_Double&#39;, &#39;_cast_Float&#39;, &#39;_cast_Half&#39;, &#39;_cast_Int&#39;, &#39;_cast_Long&#39;, &#39;_cast_Short&#39;, &#39;_convolution&#39;, &#39;_convolution_nogroup&#39;, &#39;_copy_same_type_&#39;, &#39;_ctc_loss&#39;, &#39;_cudnn_ctc_loss&#39;, &#39;_cudnn_init_dropout_state&#39;, &#39;_cudnn_rnn&#39;, &#39;_cudnn_rnn_flatten_weight&#39;, &#39;_cufft_clear_plan_cache&#39;, &#39;_cufft_get_plan_cache_max_size&#39;, &#39;_cufft_get_plan_cache_size&#39;, &#39;_cufft_set_plan_cache_max_size&#39;, &#39;_debug_has_internal_overlap&#39;, &#39;_dim_arange&#39;, &#39;_dirichlet_grad&#39;, &#39;_embedding_bag&#39;, &#39;_empty_affine_quantized&#39;, &#39;_fft_with_size&#39;, &#39;_fused_dropout&#39;, &#39;_import_dotted_name&#39;, &#39;_jit_internal&#39;, &#39;_log_softmax&#39;, &#39;_log_softmax_backward_data&#39;, &#39;_lu_with_info&#39;, &#39;_masked_scale&#39;, &#39;_mkldnn&#39;, &#39;_multinomial_alias_draw&#39;, &#39;_multinomial_alias_setup&#39;, &#39;_nnpack_available&#39;, &#39;_nnpack_spatial_convolution&#39;, &#39;_np&#39;, &#39;_ops&#39;, &#39;_pack_padded_sequence&#39;, &#39;_pad_packed_sequence&#39;, &#39;_promote_types&#39;, &#39;_reshape_from_tensor&#39;, &#39;_s_copy_from&#39;, &#39;_s_where&#39;, &#39;_sample_dirichlet&#39;, &#39;_shape_as_tensor&#39;, &#39;_six&#39;, &#39;_sobol_engine_draw&#39;, &#39;_sobol_engine_ff_&#39;, &#39;_sobol_engine_initialize_state_&#39;, &#39;_sobol_engine_scramble_&#39;, &#39;_softmax&#39;, &#39;_softmax_backward_data&#39;, &#39;_sparse_addmm&#39;, &#39;_sparse_mm&#39;, &#39;_sparse_sum&#39;, &#39;_standard_gamma&#39;, &#39;_standard_gamma_grad&#39;, &#39;_storage_classes&#39;, &#39;_string_classes&#39;, &#39;_tensor_classes&#39;, &#39;_tensor_str&#39;, &#39;_thnn&#39;, &#39;_trilinear&#39;, &#39;_unique&#39;, &#39;_unique2&#39;, &#39;_utils&#39;, &#39;_utils_internal&#39;, &#39;_weight_norm&#39;, &#39;_weight_norm_cuda_interface&#39;, &#39;abs&#39;, &#39;abs_&#39;, &#39;acos&#39;, &#39;acos_&#39;, &#39;adaptive_avg_pool1d&#39;, &#39;adaptive_max_pool1d&#39;, &#39;add&#39;, &#39;addbmm&#39;, &#39;addcdiv&#39;, &#39;addcmul&#39;, &#39;addmm&#39;, &#39;addmv&#39;, &#39;addmv_&#39;, &#39;addr&#39;, &#39;affine_grid_generator&#39;, &#39;all&#39;, &#39;allclose&#39;, &#39;alpha_dropout&#39;, &#39;alpha_dropout_&#39;, &#39;any&#39;, &#39;arange&#39;, &#39;argmax&#39;, &#39;argmin&#39;, &#39;argsort&#39;, &#39;as_strided&#39;, &#39;as_strided_&#39;, &#39;as_tensor&#39;, &#39;asin&#39;, &#39;asin_&#39;, &#39;atan&#39;, &#39;atan2&#39;, &#39;atan_&#39;, &#39;autograd&#39;, &#39;avg_pool1d&#39;, &#39;backends&#39;, &#39;baddbmm&#39;, &#39;bartlett_window&#39;, &#39;batch_norm&#39;, &#39;batch_norm_backward_elemt&#39;, &#39;batch_norm_backward_reduce&#39;, &#39;batch_norm_elemt&#39;, &#39;batch_norm_gather_stats&#39;, &#39;batch_norm_stats&#39;, &#39;batch_norm_update_stats&#39;, &#39;bernoulli&#39;, &#39;bilinear&#39;, &#39;binary_cross_entropy_with_logits&#39;, &#39;bincount&#39;, &#39;blackman_window&#39;, &#39;bmm&#39;, &#39;bool&#39;, &#39;broadcast_tensors&#39;, &#39;btrifact&#39;, &#39;btrifact_with_info&#39;, &#39;btrisolve&#39;, &#39;btriunpack&#39;, &#39;cartesian_prod&#39;, &#39;cat&#39;, &#39;cdist&#39;, &#39;ceil&#39;, &#39;ceil_&#39;, &#39;celu&#39;, &#39;celu_&#39;, &#39;chain_matmul&#39;, &#39;cholesky&#39;, &#39;cholesky_inverse&#39;, &#39;cholesky_solve&#39;, &#39;chunk&#39;, &#39;clamp&#39;, &#39;clamp_&#39;, &#39;clamp_max&#39;, &#39;clamp_max_&#39;, &#39;clamp_min&#39;, &#39;clamp_min_&#39;, &#39;clone&#39;, &#39;combinations&#39;, &#39;compiled_with_cxx11_abi&#39;, &#39;complex128&#39;, &#39;complex32&#39;, &#39;complex64&#39;, &#39;constant_pad_nd&#39;, &#39;conv1d&#39;, &#39;conv2d&#39;, &#39;conv3d&#39;, &#39;conv_tbc&#39;, &#39;conv_transpose1d&#39;, &#39;conv_transpose2d&#39;, &#39;conv_transpose3d&#39;, &#39;convolution&#39;, &#39;cos&#39;, &#39;cos_&#39;, &#39;cosh&#39;, &#39;cosh_&#39;, &#39;cosine_embedding_loss&#39;, &#39;cosine_similarity&#39;, &#39;cpp&#39;, &#39;cross&#39;, &#39;ctc_loss&#39;, &#39;cuda&#39;, &#39;cudnn_affine_grid_generator&#39;, &#39;cudnn_batch_norm&#39;, &#39;cudnn_convolution&#39;, &#39;cudnn_convolution_transpose&#39;, &#39;cudnn_grid_sampler&#39;, &#39;cudnn_is_acceptable&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;default_generator&#39;, &#39;dequantize&#39;, &#39;det&#39;, &#39;detach&#39;, &#39;detach_&#39;, &#39;device&#39;, &#39;diag&#39;, &#39;diag_embed&#39;, &#39;diagflat&#39;, &#39;diagonal&#39;, &#39;digamma&#39;, &#39;dist&#39;, &#39;distributed&#39;, &#39;distributions&#39;, &#39;div&#39;, &#39;dot&#39;, &#39;double&#39;, &#39;dropout&#39;, &#39;dropout_&#39;, &#39;dsmm&#39;, &#39;dtype&#39;, &#39;eig&#39;, &#39;einsum&#39;, &#39;embedding&#39;, &#39;embedding_bag&#39;, &#39;embedding_renorm_&#39;, &#39;empty&#39;, &#39;empty_like&#39;, &#39;empty_strided&#39;, &#39;enable_grad&#39;, &#39;eq&#39;, &#39;equal&#39;, &#39;erf&#39;, &#39;erf_&#39;, &#39;erfc&#39;, &#39;erfc_&#39;, &#39;erfinv&#39;, &#39;exp&#39;, &#39;exp_&#39;, &#39;expm1&#39;, &#39;expm1_&#39;, &#39;eye&#39;, &#39;fbgemm_is_cpu_supported&#39;, &#39;fbgemm_linear_int8_weight&#39;, &#39;fbgemm_linear_quantize_weight&#39;, &#39;fbgemm_pack_quantized_matrix&#39;, &#39;feature_alpha_dropout&#39;, &#39;feature_alpha_dropout_&#39;, &#39;feature_dropout&#39;, &#39;feature_dropout_&#39;, &#39;fft&#39;, &#39;fill_&#39;, &#39;finfo&#39;, &#39;flatten&#39;, &#39;flip&#39;, &#39;float&#39;, &#39;float16&#39;, &#39;float32&#39;, &#39;float64&#39;, &#39;floor&#39;, &#39;floor_&#39;, &#39;fmod&#39;, &#39;fork&#39;, &#39;frac&#39;, &#39;frac_&#39;, &#39;frobenius_norm&#39;, &#39;from_file&#39;, &#39;from_numpy&#39;, &#39;full&#39;, &#39;full_like&#39;, &#39;functional&#39;, &#39;gather&#39;, &#39;ge&#39;, &#39;gels&#39;, &#39;geqrf&#39;, &#39;ger&#39;, &#39;gesv&#39;, &#39;get_default_dtype&#39;, &#39;get_device&#39;, &#39;get_file_path&#39;, &#39;get_num_threads&#39;, &#39;get_rng_state&#39;, &#39;grid_sampler&#39;, &#39;grid_sampler_2d&#39;, &#39;grid_sampler_3d&#39;, &#39;group_norm&#39;, &#39;gru&#39;, &#39;gru_cell&#39;, &#39;gt&#39;, &#39;half&#39;, &#39;hamming_window&#39;, &#39;hann_window&#39;, &#39;hardshrink&#39;, &#39;has_cuda&#39;, &#39;has_cudnn&#39;, &#39;has_lapack&#39;, &#39;has_mkl&#39;, &#39;has_mkldnn&#39;, &#39;has_openmp&#39;, &#39;hinge_embedding_loss&#39;, &#39;histc&#39;, &#39;hsmm&#39;, &#39;hspmm&#39;, &#39;hub&#39;, &#39;ifft&#39;, &#39;iinfo&#39;, &#39;import_ir_module&#39;, &#39;import_ir_module_from_buffer&#39;, &#39;index_add&#39;, &#39;index_copy&#39;, &#39;index_fill&#39;, &#39;index_put&#39;, &#39;index_put_&#39;, &#39;index_select&#39;, &#39;initial_seed&#39;, &#39;instance_norm&#39;, &#39;int&#39;, &#39;int16&#39;, &#39;int32&#39;, &#39;int64&#39;, &#39;int8&#39;, &#39;int_repr&#39;, &#39;inverse&#39;, &#39;irfft&#39;, &#39;is_anomaly_enabled&#39;, &#39;is_complex&#39;, &#39;is_distributed&#39;, &#39;is_floating_point&#39;, &#39;is_grad_enabled&#39;, &#39;is_nonzero&#39;, &#39;is_same_size&#39;, &#39;is_signed&#39;, &#39;is_storage&#39;, &#39;is_tensor&#39;, &#39;isclose&#39;, &#39;isfinite&#39;, &#39;isinf&#39;, &#39;isnan&#39;, &#39;jit&#39;, &#39;kl_div&#39;, &#39;kthvalue&#39;, &#39;layer_norm&#39;, &#39;layout&#39;, &#39;le&#39;, &#39;lerp&#39;, &#39;lgamma&#39;, &#39;linspace&#39;, &#39;load&#39;, &#39;log&#39;, &#39;log10&#39;, &#39;log10_&#39;, &#39;log1p&#39;, &#39;log1p_&#39;, &#39;log2&#39;, &#39;log2_&#39;, &#39;log_&#39;, &#39;log_softmax&#39;, &#39;logdet&#39;, &#39;logspace&#39;, &#39;logsumexp&#39;, &#39;long&#39;, &#39;lstm&#39;, &#39;lstm_cell&#39;, &#39;lt&#39;, &#39;lu&#39;, &#39;lu_solve&#39;, &#39;lu_unpack&#39;, &#39;manual_seed&#39;, &#39;margin_ranking_loss&#39;, &#39;masked_fill&#39;, &#39;masked_scatter&#39;, &#39;masked_select&#39;, &#39;matmul&#39;, &#39;matrix_power&#39;, &#39;matrix_rank&#39;, &#39;max&#39;, &#39;max_pool1d&#39;, &#39;max_pool1d_with_indices&#39;, &#39;max_pool2d&#39;, &#39;max_pool3d&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;merge_type_from_type_comment&#39;, &#39;meshgrid&#39;, &#39;min&#39;, &#39;miopen_batch_norm&#39;, &#39;miopen_convolution&#39;, &#39;miopen_convolution_transpose&#39;, &#39;miopen_depthwise_convolution&#39;, &#39;mkldnn_convolution&#39;, &#39;mkldnn_convolution_backward_weights&#39;, &#39;mkldnn_max_pool2d&#39;, &#39;mkldnn_reshape&#39;, &#39;mm&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multinomial&#39;, &#39;multiprocessing&#39;, &#39;mv&#39;, &#39;mvlgamma&#39;, &#39;name&#39;, &#39;narrow&#39;, &#39;native_batch_norm&#39;, &#39;native_norm&#39;, &#39;ne&#39;, &#39;neg&#39;, &#39;neg_&#39;, &#39;nn&#39;, &#39;no_grad&#39;, &#39;nonzero&#39;, &#39;norm&#39;, &#39;norm_except_dim&#39;, &#39;normal&#39;, &#39;nuclear_norm&#39;, &#39;numel&#39;, &#39;ones&#39;, &#39;ones_like&#39;, &#39;onnx&#39;, &#39;ops&#39;, &#39;optim&#39;, &#39;orgqr&#39;, &#39;ormqr&#39;, &#39;os&#39;, &#39;pairwise_distance&#39;, &#39;parse_ir&#39;, &#39;parse_type_comment&#39;, &#39;pdist&#39;, &#39;pin_memory&#39;, &#39;pinverse&#39;, &#39;pixel_shuffle&#39;, &#39;platform&#39;, &#39;poisson&#39;, &#39;polygamma&#39;, &#39;potrf&#39;, &#39;potri&#39;, &#39;potrs&#39;, &#39;pow&#39;, &#39;prelu&#39;, &#39;prepare_multiprocessing_environment&#39;, &#39;prod&#39;, &#39;pstrf&#39;, &#39;q_scale&#39;, &#39;q_zero_point&#39;, &#39;qint8&#39;, &#39;qr&#39;, &#39;quantize_linear&#39;, &#39;quantized_gru_cell&#39;, &#39;quantized_lstm&#39;, &#39;quantized_lstm_cell&#39;, &#39;quantized_rnn_relu_cell&#39;, &#39;quantized_rnn_tanh_cell&#39;, &#39;quasirandom&#39;, &#39;rand&#39;, &#39;rand_like&#39;, &#39;randint&#39;, &#39;randint_like&#39;, &#39;randn&#39;, &#39;randn_like&#39;, &#39;random&#39;, &#39;randperm&#39;, &#39;range&#39;, &#39;reciprocal&#39;, &#39;reciprocal_&#39;, &#39;relu&#39;, &#39;relu_&#39;, &#39;remainder&#39;, &#39;renorm&#39;, &#39;repeat_interleave&#39;, &#39;reshape&#39;, &#39;resize_as_&#39;, &#39;rfft&#39;, &#39;rnn_relu&#39;, &#39;rnn_relu_cell&#39;, &#39;rnn_tanh&#39;, &#39;rnn_tanh_cell&#39;, &#39;roll&#39;, &#39;rot90&#39;, &#39;round&#39;, &#39;round_&#39;, &#39;rrelu&#39;, &#39;rrelu_&#39;, &#39;rsqrt&#39;, &#39;rsqrt_&#39;, &#39;rsub&#39;, &#39;s_copy_&#39;, &#39;s_native_addmm&#39;, &#39;s_native_addmm_&#39;, &#39;saddmm&#39;, &#39;save&#39;, &#39;scalar_tensor&#39;, &#39;scatter&#39;, &#39;scatter_add&#39;, &#39;select&#39;, &#39;selu&#39;, &#39;selu_&#39;, &#39;serialization&#39;, &#39;set_anomaly_enabled&#39;, &#39;set_default_dtype&#39;, &#39;set_default_tensor_type&#39;, &#39;set_flush_denormal&#39;, &#39;set_grad_enabled&#39;, &#39;set_num_threads&#39;, &#39;set_printoptions&#39;, &#39;set_rng_state&#39;, &#39;short&#39;, &#39;sigmoid&#39;, &#39;sigmoid_&#39;, &#39;sign&#39;, &#39;sin&#39;, &#39;sin_&#39;, &#39;sinh&#39;, &#39;sinh_&#39;, &#39;slogdet&#39;, &#39;smm&#39;, &#39;softmax&#39;, &#39;solve&#39;, &#39;sort&#39;, &#39;sparse&#39;, &#39;sparse_coo&#39;, &#39;sparse_coo_tensor&#39;, &#39;split&#39;, &#39;split_with_sizes&#39;, &#39;spmm&#39;, &#39;sqrt&#39;, &#39;sqrt_&#39;, &#39;squeeze&#39;, &#39;sspaddmm&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;stft&#39;, &#39;storage&#39;, &#39;strided&#39;, &#39;sub&#39;, &#39;sum&#39;, &#39;svd&#39;, &#39;symeig&#39;, &#39;sys&#39;, &#39;t&#39;, &#39;take&#39;, &#39;tan&#39;, &#39;tan_&#39;, &#39;tanh&#39;, &#39;tanh_&#39;, &#39;tensor&#39;, &#39;tensordot&#39;, &#39;testing&#39;, &#39;threshold&#39;, &#39;threshold_&#39;, &#39;topk&#39;, &#39;torch&#39;, &#39;trace&#39;, &#39;transpose&#39;, &#39;triangular_solve&#39;, &#39;tril&#39;, &#39;tril_indices&#39;, &#39;triplet_margin_loss&#39;, &#39;triu&#39;, &#39;triu_indices&#39;, &#39;trtrs&#39;, &#39;trunc&#39;, &#39;trunc_&#39;, &#39;typename&#39;, &#39;uint8&#39;, &#39;unbind&#39;, &#39;unique&#39;, &#39;unique_consecutive&#39;, &#39;unsqueeze&#39;, &#39;utils&#39;, &#39;var&#39;, &#39;version&#39;, &#39;wait&#39;, &#39;where&#39;, &#39;zero_&#39;, &#39;zeros&#39;, &#39;zeros_like&#39;] . #collapse-hide help(torch.lu) . . Help on function lu in module torch.functional: lu(A, pivot=True, get_infos=False, out=None) Computes the LU factorization of a square matrix or batches of square matrices :attr:`A`. Returns a tuple containing the LU factorization and pivots of :attr:`A`. Pivoting is done if :attr:`pivot` is set to ``True``. .. note:: The pivots returned by the function are 1-indexed. If :attr:`pivot` is ``False``, then the returned pivots is a tensor filled with zeros of the appropriate size. .. note:: LU factorization with :attr:`pivot` = ``False`` is not available for CPU, and attempting to do so will throw an error. However, LU factorization with :attr:`pivot` = ``False`` is available for CUDA. .. note:: This function does not check if the factorization was successful or not if :attr:`get_infos` is ``True`` since the status of the factorization is present in the third element of the return tuple. Arguments: A (Tensor): the tensor to factor of size :math:`(*, m, m)` pivot (bool, optional): controls whether pivoting is done. Default: ``True`` get_infos (bool, optional): if set to ``True``, returns an info IntTensor. Default: ``False`` out (tuple, optional): optional output tuple. If :attr:`get_infos` is ``True``, then the elements in the tuple are Tensor, IntTensor, and IntTensor. If :attr:`get_infos` is ``False``, then the elements in the tuple are Tensor, IntTensor. Default: ``None`` Returns: (Tensor, IntTensor, IntTensor (optional)): A tuple of tensors containing - **factorization** (*Tensor*): the factorization of size :math:`(*, m, m)` - **pivots** (*IntTensor*): the pivots of size :math:`(*, m)` - **infos** (*IntTensor*, *optional*): if :attr:`get_infos` is ``True``, this is a tensor of size :math:`(*)` where non-zero values indicate whether factorization for the matrix or each minibatch has succeeded or failed Example:: &gt;&gt;&gt; A = torch.randn(2, 3, 3) &gt;&gt;&gt; A_LU, pivots = torch.lu(A) &gt;&gt;&gt; A_LU tensor([[[ 1.3506, 2.5558, -0.0816], [ 0.1684, 1.1551, 0.1940], [ 0.1193, 0.6189, -0.5497]], [[ 0.4526, 1.2526, -0.3285], [-0.7988, 0.7175, -0.9701], [ 0.2634, -0.9255, -0.3459]]]) &gt;&gt;&gt; pivots tensor([[ 3, 3, 3], [ 3, 3, 3]], dtype=torch.int32) &gt;&gt;&gt; A_LU, pivots, info = torch.lu(A, get_infos=True) &gt;&gt;&gt; if info.nonzero().size(0) == 0: ... print(&#39;LU factorization succeeded for all samples!&#39;) LU factorization succeeded for all samples! . Primeira fun&#231;&#227;o - torch.chain_matmul . Uma das atividades mais utilizadas em Deep Learning é a multiplicação de matrizes e uma das funções que o Pytorch nos oferece para esta atividade é o matmul , onde nos oferece a oportundiade de realizar o produtor de 2 tensores. . Nesta primeira função eu destaco a função chain_matmul que pode ser utilizada para realizar produtos de N tensors . Criamos 3 matrizes 2x2 utilizando a função torch.randn . #collapse-show # Example 1 - working matrix1 = torch.randn(3, 4) matrix2 = torch.randn(4, 5) matrix3 = torch.randn(5, 6) # Sample [matrix3, matrix1] . . [tensor([[-1.0494, 0.4786, -0.2496, -0.9682, -1.1614, -1.6895], [ 0.4752, -0.0841, -1.4004, 0.0402, -0.5590, -0.9405], [ 0.5449, 1.5989, 0.5870, -1.2225, -0.3488, -0.2063], [ 2.5068, -1.1578, 0.4410, -1.4279, 1.5589, -0.1604], [-0.0883, 1.3295, -1.4044, -0.6259, -1.1656, 0.1526]]), tensor([[ 2.8613, 0.3382, 0.3099, 0.7402], [-0.6262, -1.3056, 0.6018, -0.6395], [-0.9182, -0.1888, -0.2580, -0.0872]])] . Para realizar a multiplicação simplesmente passamos as 3 matrizes como argumento. . Detalhe sobre as matrizes : . matrix1 é uma matriz 3x4 : 3 linhas e 4 colunas | matrix2 é uma matriz 4x5 : 4 linhas e 5 colunas | matrix3 é uma matriz 5x6 : 5 linhas e 6 colunas | . O resultado dessa multiplicação é uma nova matriz 3x6, ou seja, 3 linhsa e 6 colunas. . #collapse-show # performing product torch.chain_matmul(matrix1, matrix2, matrix3) . . tensor([[-8.0324, -2.8931, 0.1645, 5.4147, -1.6135, -0.1331], [ 0.0715, -1.8514, -0.1220, 0.7759, 1.0616, 1.0326], [ 3.3314, 0.4199, 0.5218, -2.4496, 1.1681, -0.2269]]) . Um segundo exemplo utilizando 4 matrizes maiores . #collapse-show # Example 2 - working matrix1 = torch.randn(100,110) matrix2 = torch.randn(110,120) matrix3 = torch.randn(120,130) matrix4 = torch.randn(130,140) # Sample [matrix1, matrix2] . . [tensor([[-1.0113, 2.7251, 0.1640, ..., -1.1982, 0.2516, 2.3802], [-0.2575, 1.0712, -0.1683, ..., 0.0799, 0.1335, -0.2284], [-0.4726, 1.4036, -1.6088, ..., 0.3482, 0.6061, -0.0266], ..., [ 0.7878, 0.5653, -0.7980, ..., -0.6144, 0.7365, -1.5773], [-1.2001, -2.0501, 0.2104, ..., -1.2552, 0.2905, -0.4115], [ 0.7512, 1.0929, -0.1207, ..., -2.0084, -0.8357, -1.8306]]), tensor([[-1.0272, 1.3241, -0.7045, ..., 2.6188, 0.7776, 0.2609], [-2.2178, 0.2632, -1.0765, ..., 1.0710, -0.0811, -0.6641], [ 0.8842, -0.5080, 0.2268, ..., 0.1498, 0.2623, -1.1105], ..., [-1.0267, 0.8322, -1.3487, ..., -0.7979, -1.6696, -0.4104], [ 0.9523, -0.4135, -0.2482, ..., 0.6825, -1.1463, -0.7079], [ 0.0572, 0.5462, 0.4128, ..., 1.1507, 1.1007, 2.5236]])] . Neste exemplo mostro como a função é eficiente, levando apenas 3.94ms para realizar a multiplicação de todas as matrizes. . #collapse-show # performing product %time torch.chain_matmul(matrix1, matrix2, matrix3,matrix4) . . CPU times: user 3.14 ms, sys: 802 µs, total: 3.94 ms Wall time: 53.4 ms . tensor([[-1.0312e+03, 2.2024e+03, 8.7111e+02, ..., -1.6845e+03, -1.8864e+03, 2.1999e+03], [-2.6746e+03, -1.2506e+03, -6.2687e+02, ..., 1.6874e+03, 2.2933e+03, -2.3796e+02], [ 2.0759e+02, -1.3513e+03, -1.8177e+03, ..., -9.0427e+02, -1.5769e+03, 3.6219e+03], ..., [-3.3170e+01, 5.5390e+02, 4.1289e+02, ..., -1.4384e+03, 3.1857e+02, 5.0504e+03], [ 4.1570e+02, -1.2112e+03, 4.0855e+00, ..., -3.3088e+02, -3.1520e+02, -1.3502e+03], [ 3.5522e+03, -1.2904e+03, -3.7685e+02, ..., 1.6309e+02, -3.0861e+02, -3.3388e+02]]) . No terceiro exemplo destaco um exemplo de falha, tentando realizar multiplicação de matrizes com dimensões diferentes. . #collapse-show # Example 3 - breaking matrix1 = torch.randn(3, 4) matrix2 = torch.randn(4, 5, 4) # Sample [matrix2, matrix1] . . [tensor([[[-1.3402, -1.3130, -0.3395, 0.5945], [-0.0259, -0.1071, -1.1639, 1.0613], [-0.7485, -1.1593, -1.5075, -1.0894], [-1.3146, 2.8806, 0.2349, 0.2622], [ 1.0905, -0.5099, 1.3923, -0.8981]], [[-0.7263, -0.2341, -0.5183, 0.3943], [ 0.6819, 0.1342, 0.0794, -0.0281], [-1.4046, -1.2519, 0.4766, 0.3968], [ 0.0881, -0.9358, -1.5493, 0.1794], [-1.0300, 0.8201, -0.2617, 0.7340]], [[-0.7806, 1.0247, -0.5675, -0.1108], [-0.5045, -1.4726, 0.6898, -0.2458], [ 0.1259, -0.9895, 1.2314, 0.3145], [ 0.0806, 1.2443, -0.9222, 0.2020], [-0.6894, -0.1846, 0.5644, 0.1418]], [[ 0.3160, -0.3909, 0.5069, -2.4691], [ 0.2330, -1.4668, 0.9580, -0.2209], [ 1.1199, -0.7593, 0.7848, 0.5991], [-0.3350, -1.3236, -0.7181, 0.7984], [-1.2864, 1.1569, -1.7247, -0.4536]]]), tensor([[ 0.5584, 1.1150, -1.2637, 1.5120], [-0.3575, 1.1148, -1.4004, 2.1986], [-1.3665, 1.1424, 0.2155, -0.0970]])] . #collapse-show torch.chain_matmul(matrix1, matrix2) . . RuntimeError Traceback (most recent call last) &lt;ipython-input-18-fc1c9bb90b38&gt; in &lt;module&gt; 1 #collapse-show -&gt; 2 torch.chain_matmul(matrix1, matrix2) ~/anaconda3/lib/python3.7/site-packages/torch/functional.py in chain_matmul(*matrices) 740 .. _`[CLRS]`: https://mitpress.mit.edu/books/introduction-algorithms-third-edition 741 &#34;&#34;&#34; --&gt; 742 return torch._C._VariableFunctions.chain_matmul(matrices) 743 744 RuntimeError: Tensor dimension is 3, expected 2 instead. . Podemos ver que o output de erro do pytorch é bem explicativo, nos retornando que esperava um Tensor de 2D, duas dimensões e recebeu um Tensor 3D. . Segunda fun&#231;&#227;o - torch.cumprod . This second function returns the cumulative product of elements . Nesta segunda função gostaria de destacar a função torch.cumprod , onde o nome é bem intuitivo quanto sua ação, isto mesmo , esta função realiza produto comulativo de tensores. . Para exemplificar, neste primeiro exemplo crio um tensor de dois números randomicos e utilizo a função cumprod para realizar o produto. . #collapse-show # Example 1 - working nums = torch.randn(2) nums . . tensor([-0.9611, 0.5437]) . #collapse-show torch.cumprod(nums,dim=0) . . tensor([-0.9611, -0.5226]) . Como pode ser observar o segundo elemento foi substituido pelo produto entre os dois números, nesta função também utilizo o argumento dim=0, que indica a dimensão da multiplicação. . #collapse-show -0.9611 * 0.5437 . . -0.52255007 . Neste segundo exemplo utilizando ainda a função cumprod, vamos realizar o produto cumulativo entre um tensor 3x3 : . #collapse-show # Example 2 - working nums = torch.randn(3,3) nums . . tensor([[ 1.8956, -1.4917, -0.9016], [-0.8868, 0.2748, -0.2181], [ 0.5888, 0.2202, -0.9849]]) . #collapse-show torch.cumprod(nums,dim=1) . . tensor([[ 1.8956, -2.8277, 2.5494], [-0.8868, -0.2437, 0.0531], [ 0.5888, 0.1297, -0.1277]]) . Abaixo a multiplicação realizada manualmente, utilizando um tensor 3x3 , utilizando dim=1 , dimensão 1: . #collapse-show 1.8956 * -1.4917 * -0.9016 . . 2.549424134432 . No terceiro exemplo mostro como se especificar uma dimensão inexistente teremos o seguinte resultado. . #collapse-show # Example 3 - breaking nums = torch.randn(3,3) nums . . tensor([[ 0.7083, -1.3484, 2.3374], [-0.1800, -0.2821, 1.4368], [ 0.8014, -1.1346, -0.7196]]) . #collapse-show torch.cumprod(nums,dim=9) . . IndexError Traceback (most recent call last) &lt;ipython-input-121-f405a7ba577b&gt; in &lt;module&gt; -&gt; 1 torch.cumprod(nums,dim=9) IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 9) . Terceira fun&#231;&#227;o - torch.det . Esta terceira função é utilizada para calcular a determinante de uma matriz quadrada. . Por definição, uma matriz é considerada quadrada quando o número de colunas é igual ao número de linhas e esta associdada a um número que recebe a denominação de determinante . . Marcos Noe, no site brasilescola.uol.com.br, explica que : . . Note: O determinante de uma Matriz é dado pelo valor numérico resultante da subtração entre o somatório do produto dos termos da diagonal principal e do somatório do produto dos termos da diagonal secundária . # Example 1 - working a = torch.tensor([[2,9],[-1,6.]]) a . tensor([[ 2., 9.], [-1., 6.]]) . Neste primeiro exemplo tempos : . A diagonal principal 2,6, onde o produto é : 2 * 6 = 12 | A diagonal secundária -1,9 , o produto será : -1 * 9 = -9 | E por fim a soma : 12 - (-9) = 21 | . torch.det(a) . tensor(21.) . Neste segundo exemplo vamos ver uma matriz 3x3 . # Example 2 - working A = torch.randn(3, 3) A . tensor([[-0.1348, -1.0434, 0.0589], [ 0.2338, 1.0583, -0.1160], [-0.6723, 0.7773, 0.8919]]) . torch.det(A) . tensor(0.0493) . Como pytorch trabalha com valores em float não podemos apresentar valores inteiros para a função pois como documentado ela espera um valor do time float . # Example 3 - breaking b = torch.tensor([[2,9],[-1,6]]) b . tensor([[ 2, 9], [-1, 6]]) . torch.det(b) . RuntimeError Traceback (most recent call last) &lt;ipython-input-135-eaa77d970a4d&gt; in &lt;module&gt; -&gt; 1 torch.det(b) RuntimeError: Expected a floating point tensor as input . Quarta fun&#231;&#227;o - torch.flatten . Esta função é utilizada para transformar uma matriz em um vetor, ou seja, como demostrado no exemplo abaixo ela pega uma matriz 2x2 e transforma em um vetor unidimensional. . # Example 1 - working T = torch.tensor([[1, 2], [3, 4]]) T . tensor([[1, 2], [3, 4]]) . torch.flatten(T) . tensor([1, 2, 3, 4]) . Como podemos ver no segundo exemplo temos um tensor 2x2x2 , ou seja duas matrizes, neste caso ao realizar o flatten teremos o seguinte output: . # Example 2 - working T = torch.tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) T . tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) . torch.flatten(T, start_dim=1) . tensor([[1, 2, 3, 4], [5, 6, 7, 8]]) . Podemos utilizar como no exemplo o parametro start_dim para espeficicar a primera dimensão. . Abaixo teremos um exemplo onde não se pode aplicar o flatten quando range de dimensões não é válido. . # Example 3 - breaking T = torch.tensor([[1, 2], [3, 4]]) T . tensor([[1, 2], [3, 4]]) . torch.flatten(T, start_dim=2) . IndexError Traceback (most recent call last) &lt;ipython-input-165-f58365975ace&gt; in &lt;module&gt; -&gt; 1 torch.flatten(T, start_dim=2) IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 2) . Quinta fun&#231;&#227;o - torch.lu . A última função que destaco, mas não menos importante é a torch.lu , esta interessante função retorna uma tupla contendo LU factorization e pivots, no primeiro exemplo criamos um tensor 2x3x3 e aplicamos a função: . # Example 1 - working A = torch.randn(2, 3, 3) A_LU, pivots = torch.lu(A, pivot=True) A_LU . tensor([[[-0.8440, 0.3518, -0.0991], [ 0.6065, -1.2822, -1.2502], [-0.9766, 0.5978, -0.9145]], [[-0.4165, 1.0368, -0.7703], [ 0.3856, -0.8209, -0.9273], [-0.9241, -0.7736, -0.5355]]]) . pivots . tensor([[3, 3, 3], [2, 2, 3]], dtype=torch.int32) . A_LU, pivots, info = torch.lu(A, get_infos=True) if info.nonzero().size(0) == 0: print(&#39;LU factorization succeeded for all samples!&#39;) . LU factorization succeeded for all samples! . info . tensor([0, 0], dtype=torch.int32) . Como todo exemplo quero mostrar uma utilização com erro, como podemos ver algumas opção só estão disponiveis para processamento em GPU/CUDA. . # Example 3 - breaking A = torch.randn(2, 3, 3) A_LU, pivots = torch.lu(A, pivot=False) A_LU . RuntimeError Traceback (most recent call last) &lt;ipython-input-185-c3dc98d6d278&gt; in &lt;module&gt; 4 5 A = torch.randn(2, 3, 3) -&gt; 6 A_LU, pivots = torch.lu(A, pivot=False) 7 A_LU 8 /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/_jit_internal.py in fn(*args, **kwargs) 207 return if_true(*args, **kwargs) 208 else: --&gt; 209 return if_false(*args, **kwargs) 210 211 if if_true.__doc__ is None and if_false.__doc__ is not None: /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/functional.py in _lu_no_infos(A, pivot, get_infos, out) 1027 return handle_torch_function( 1028 lu, (A,), A, pivot=pivot, get_infos=get_infos, out=out) -&gt; 1029 result = _lu_impl(A, pivot, get_infos, out) 1030 if out is not None: 1031 _check_list_size(len(out), get_infos, out) /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/functional.py in _lu_impl(A, pivot, get_infos, out) 993 &#34;&#34;&#34; 994 # If get_infos is True, then we don&#39;t need to check for errors and vice versa --&gt; 995 return torch._lu_with_info(A, pivot=pivot, check_errors=(not get_infos)) 996 997 def _check_list_size(out_len, get_infos, out): RuntimeError: lu without pivoting is not implemented on the CPU . Conclus&#227;o . Aprendi muito ao pesquisar as funções da lib torch, minha jornada em Deep Learning está no começo mas é muito estimulante ver como é facil a utilização e documentação, apesar do notebook ser uma lista de 5 funções tive o prazer de estudar diversas outras como torch.randn. . Este notebook é a parte da primeira aula do curso Zero to Gans oferecido pela @Jovian.ml e @freecodecamp, muito obrigado @aakashns pela brilhante aula. . Thank you @aakashns for the fantastic course. . Reference Links . Algumas referencias : . Official documentation for torch.Tensor: https://pytorch.org/docs/stable/tensors.html | . Video aula 1 - Zero To Gans . youtube :https://www.youtube.com/watch?v=vo_fUOk-IKk .",
            "url": "https://brunodeabreu.github.io/blog/pytorch/deep%20learning/2020/06/14/Descobrindo-5-Funcoes-Pytorch.html",
            "relUrl": "/pytorch/deep%20learning/2020/06/14/Descobrindo-5-Funcoes-Pytorch.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://brunodeabreu.github.io/blog/jupyter/2020/06/13/2020-02-20-test.html",
            "relUrl": "/jupyter/2020/06/13/2020-02-20-test.html",
            "date": " • Jun 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Doar Sangue salva vidas",
            "content": ". Doar sangue salva vidas, isso é divulgado nas mídias sociais, além de ser utilizado para procedimentos e intervenções médicas é utilizado no tratamento de diversas doenças crônicas. . Constantemente os bancos de sangue estão com estoques abaixo da normalidade, principalmente durantes os meses de férias. Com isso Ministério da Saúde reforça periodicamente a importância de adotar uma cultura solidária da doação regular e espontânea de sangue. Mas na prática poucos buscam os postos de doação de forma voluntária, normalmente é incentivado quando um parente ou amigo solicita doação. . Como a doação é voluntárias é difícil para os centros de hemoterapia e hospitais saberem quando um doador irá retornar para doar sangue . Explorando os dados . O dataset . Este conjunto de dados foi doado pelo Blood Transfusion Service Center na cidade de Hsin-Chu City em Taiwan em 2008, infelizmente não encontrei nenhuma fonte de dados abertos com algo similar. . Este dataset é disponibilizado pelo UCI-Blood Transfusion Service Center Data Set e 2019 drivendata.org promoveu uma competição com o tema Warm Up: Predict Blood Donations . #collapse-hide import pandas as pd . . #collapse-hide cols = [&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;target&#39;] df = pd.read_csv(&#39;data/transfusion.data&#39;, names=cols, header=0) df.head() . . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 748 entries, 0 to 747 Data columns (total 5 columns): rec 748 non-null int64 frec 748 non-null int64 total 748 non-null int64 time 748 non-null int64 target 748 non-null int64 dtypes: int64(5) memory usage: 29.3 KB . Descri&#231;&#227;o das Vari&#225;veis: . O dataset contem 749 linhas com dados de dodores com os seguintes dados: . rec : meses desde a última doação | fre: total número de doações | total : Total de sangue doado | time : meses desde primeira doação | target : Informação se foi doado ou não | . Explorando . df.head() . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . #collapse-hide df.total.value_counts() . . 250 158 500 112 750 87 1000 62 1250 62 1500 52 1750 43 2000 31 2250 24 2750 22 2500 14 3000 14 4000 13 3500 13 3250 9 3750 6 4250 4 6000 3 4750 2 5250 2 5500 2 5000 2 8250 1 12500 1 9500 1 11500 1 5750 1 8500 1 6500 1 4500 1 11000 1 10750 1 10250 1 Name: total, dtype: int64 . #collapse-show df.describe() . . rec frec total time target . count | 748.000000 | 748.000000 | 748.000000 | 748.000000 | 748.000000 | . mean | 9.506684 | 5.514706 | 1378.676471 | 34.282086 | 0.237968 | . std | 8.095396 | 5.839307 | 1459.826781 | 24.376714 | 0.426124 | . min | 0.000000 | 1.000000 | 250.000000 | 2.000000 | 0.000000 | . 25% | 2.750000 | 2.000000 | 500.000000 | 16.000000 | 0.000000 | . 50% | 7.000000 | 4.000000 | 1000.000000 | 28.000000 | 0.000000 | . 75% | 14.000000 | 7.000000 | 1750.000000 | 50.000000 | 0.000000 | . max | 74.000000 | 50.000000 | 12500.000000 | 98.000000 | 1.000000 | . #collapse-show df.total.value_counts(normalize=True).plot(kind=&#39;barh&#39;) plt.show() . . #collapse-hide df.groupby(&#39;frec&#39;)[&#39;total&#39;].mean() . . frec 1 250 2 500 3 750 4 1000 5 1250 6 1500 7 1750 8 2000 9 2250 10 2500 11 2750 12 3000 13 3250 14 3500 15 3750 16 4000 17 4250 18 4500 19 4750 20 5000 21 5250 22 5500 23 5750 24 6000 26 6500 33 8250 34 8500 38 9500 41 10250 43 10750 44 11000 46 11500 50 12500 Name: total, dtype: int64 . #collapse-hide import matplotlib.pyplot as plt import seaborn as sns . . Rela&#231;&#245;es . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb271dc50&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, hue=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26e7650&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, col=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26a9990&gt; . Residuais . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0d3c3d0&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c82810&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c037d0&gt; . Reg . #collapse-show plt.scatter(df.time, df.total, label=&#39;data&#39;, color=&#39;red&#39;, marker=&#39;o&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;blue&#39;, scatter=None, label=&#39;1st Order&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;green&#39;, order=2 ,scatter=None, label=&#39;2nd Order&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0be4d90&gt; . Distribui&#231;&#227;o Multivariada . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb0af1b10&gt; . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, kind=&#39;kde&#39;) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb099b050&gt; . Pairplot . #collapse-hide sns.pairplot(df) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffbb0a9a8d0&gt; . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide binned = fast_linbin(X, a, b, gridsize) / (delta * nobs) /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars FAC1 = 2*(np.pi*bw/RANGE)**2 . &lt;seaborn.axisgrid.PairGrid at 0x7ffba3ab9650&gt; . Feature Eng . #collapse-show df[&#39;time_frec&#39;] = df.time / df.frec df[&#39;time_rec&#39;] = df.time - df.rec df[&#39;total_time&#39;] = df.total / df.time df.sample(5) . . rec frec total time target time_frec time_rec total_time . 7 | 1 | 12 | 3000 | 35 | 0 | 2.916667 | 34 | 85.714286 | . 37 | 4 | 6 | 1500 | 16 | 1 | 2.666667 | 12 | 93.750000 | . 242 | 4 | 3 | 750 | 25 | 1 | 8.333333 | 21 | 30.000000 | . 49 | 2 | 2 | 500 | 2 | 0 | 1.000000 | 0 | 250.000000 | . 469 | 11 | 2 | 500 | 70 | 0 | 35.000000 | 59 | 7.142857 | . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffba0e1d3d0&gt; . Save DataFrame to picckle . df.to_pickle(&#39;data/dados.pkl&#39;) . Modelagem . import pickle pickle_in = open(&quot;data/dados.pkl&quot;,&quot;rb&quot;) data = pickle.load(pickle_in) . x = data[[&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;time_frec&#39;, &#39;time_rec&#39;,&#39;total_time&#39;]] y = data.target . # Split from sklearn.model_selection import train_test_split X_train, X_valid, y_train, y_valid = train_test_split(x, y, test_size=0.33, random_state=42) . GaussianNB - acc 70% . #collapse-show from sklearn import datasets from sklearn import metrics from sklearn.naive_bayes import GaussianNB # Classificador clf = GaussianNB() # Modelo modelo = clf.fit(X_train, y_train) print(modelo) # Previsões previsto = modelo.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . GaussianNB(priors=None, var_smoothing=1e-09) precision recall f1-score support 0 0.77 0.85 0.81 181 1 0.43 0.30 0.35 66 accuracy 0.70 247 macro avg 0.60 0.58 0.58 247 weighted avg 0.68 0.70 0.69 247 [[154 27] [ 46 20]] . Logistic Regression - acc 74% . #collapse-show from sklearn.linear_model import LogisticRegressionCV from sklearn import metrics #classifier clf = LogisticRegressionCV(cv=5, random_state=0).fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . LogisticRegressionCV(Cs=10, class_weight=None, cv=5, dual=False, fit_intercept=True, intercept_scaling=1.0, l1_ratios=None, max_iter=100, multi_class=&#39;warn&#39;, n_jobs=None, penalty=&#39;l2&#39;, random_state=0, refit=True, scoring=None, solver=&#39;lbfgs&#39;, tol=0.0001, verbose=0) precision recall f1-score support 0 0.75 0.98 0.85 181 1 0.60 0.09 0.16 66 accuracy 0.74 247 macro avg 0.67 0.53 0.50 247 weighted avg 0.71 0.74 0.66 247 [[177 4] [ 60 6]] . SVM - acc 73% . #collapse-show from sklearn import svm from sklearn import metrics #classifier clf = svm.SVC().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto_deprecated&#39;, kernel=&#39;rbf&#39;, max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) precision recall f1-score support 0 0.74 0.97 0.84 181 1 0.50 0.09 0.15 66 accuracy 0.73 247 macro avg 0.62 0.53 0.50 247 weighted avg 0.68 0.73 0.66 247 [[175 6] [ 60 6]] . /home/bruno/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . Tree - acc 67% . #collapse-show from sklearn import tree #classifier clf = tree.DecisionTreeClassifier().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=False, random_state=None, splitter=&#39;best&#39;) precision recall f1-score support 0 0.76 0.81 0.78 181 1 0.36 0.29 0.32 66 accuracy 0.67 247 macro avg 0.56 0.55 0.55 247 weighted avg 0.65 0.67 0.66 247 [[147 34] [ 47 19]] .",
            "url": "https://brunodeabreu.github.io/blog/jupyter/2020/03/29/Doacao-Sangue.html",
            "relUrl": "/jupyter/2020/03/29/Doacao-Sangue.html",
            "date": " • Mar 29, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Meu nome é Bruno sou DBA especializado em Db2 nas plataformas Unix e Linux, estudante de estatística, ciência de dados e inteligência artificial, o principal objetivo deste blog é compartilhar notas e cursos e jupyter notebooks de projetos. . Me formei em ciência da computação pela Universidade Fumec em 2007, em 2008 iniciei minha tragetória na IBM Brasil atuando como DBA Db2 para clientes em todo o mundo. . Em 2016 comecei a estudar sobre Ciência de dados, completei o programa de Pós-Graduação da PUC-MG em Big Data e Ciência de Dados em 2019 e desde então me dedico a estudar sobre machine learning, deep learning, inteligência artificial através de diversas plataformas como Coursera, EdX, Data Science Academy e Datacamp. .",
          "url": "https://brunodeabreu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}