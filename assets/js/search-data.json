{
  
    
        "post0": {
            "title": "Feature Engineering R",
            "content": "“Features Engineering com Variáveis Categóricas” . Neste post compartilho técnicas de feature engineering com variáveis categóricas no R, conteúdo do curso de Machine Learning da Data Science Academy . toc:true- branch: master | badges: true | comments: true | categories: [R, Feature Enegineering] | . Normalmente modelos de machine learning tem dificuldade de trabalhar com dados em formato texto, com tećnicas de feature engineering buscamos alternativas de representar a informação da variável categórica de forma númerica, sem perder o teor ou informação, esta tem que ser a mesma. . Ao realizar Features Engineering é uma oportunidade de olhar para os dados de forma diferente, é importante separar o conceito de data wrangling (remover missing NAs, alterar variáveis, limpeza de dados) do conceito de feature engineering que é relacionado a alteração das variáveis para melhorar a forma de apresentação ou usabilidade. . Fonte de Dados UCI Back Marketing Data set . UCI Info . Bibliotecas . #install.packages(&quot;dplyr&quot;) #install.packages(&quot;ggplot2&quot;) #install.packages(caret) library(dplyr) library(ggplot2) library(caret) . Download Dataset . tempdl &lt;- tempfile() baseURL &lt;- &#39;https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip&#39; download.file(baseURL, tempdl, mode = &#39;wb&#39; ) . Lendo o Dataset . Utilizando read.table | . unzip(tempdl, &#39;bank-full.csv&#39;) dataset_bank &lt;- read.table(&#39;bank-full.csv&#39;, header = TRUE, sep=&#39;;&#39;) head(dataset_bank) . Adicionando uma coluna . Baseado na coluna job criar uma coluna relacionado o nível de conhecimento em tecnologia . table(dataset_bank$job) . dataset_bank %&gt;% group_by(job)%&gt;% summarise(n = n())%&gt;% ggplot(aes(x = job, y=n)) + geom_bar(stat = &#39;identity&#39;)+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) . Utilizando Mutate do dplyr é possível atribuir uma coluna ao dataset com base no conhecimento de cada job . Como isso acrescentamos uma informação ao conjunto de dados que pode ser importante analise . dataset_bank &lt;- dataset_bank %&gt;% mutate(technology_use = case_when(job == &#39;admin&#39; ~ &#39;medio&#39;, job == &#39;blue-collar&#39; ~ &#39;baixo&#39;, job == &#39;entrepreneur&#39; ~ &#39;alto&#39;, job == &#39;housemaid&#39; ~ &#39;baixo&#39;, job == &#39;management&#39; ~ &#39;medio&#39;, job == &#39;retired&#39; ~ &#39;baixo&#39;, job == &#39;self-employed&#39; ~ &#39;baixo&#39;, job == &#39;services&#39; ~ &#39;medio&#39;, job == &#39;student&#39; ~ &#39;alto&#39;, job == &#39;technician&#39; ~ &#39;alto&#39;, job == &#39;unemployed&#39; ~ &#39;baixo&#39;, job == &#39;unknown&#39; ~ &#39;baixo&#39;)) head(dataset_bank$technology_use) . Verificando a proporçãodo nível de conhecimento em tecnolocia, utilizando round, prop.table . round(prop.table(table(dataset_bank$technology_use)), 2) . Criando uma variáveis Dummies . Neste dataset a coluna default apresenta um padrão yes ou no para melhor utilização é recomendável que se transforme em 0 ou 1 . . dataset_bank &lt;- dataset_bank %&gt;% mutate( defaulted = ifelse(default == &#39;yes&#39;, 1 , 0)) . One-Hot Encoding . Neste bloco de código utilzando o pacote caret é feita a conversão de todas as variáveis categóricas do dataset e armazenado em um segundo dataset chamado bank.dummies . dmy &lt;- dummyVars(&#39; ~ .&#39;, data=dataset_bank) bank.dummies &lt;- data.frame(predict(dmy, newdata= dataset_bank)) . Analisando os dados do novo dataset . str(bank.dummies) . Combinação de atributos . Realizando o agrupamento de duas variáveis . dataset_bank %&gt;% group_by(job, marital) %&gt;% summarise(n = n()) . Visualizando os dados em um gráfico . dataset_bank %&gt;% group_by(job, marital)%&gt;% summarise(n = n())%&gt;% ggplot(aes(x = job, y=n , fill=marital))+ geom_bar(stat = &#39;identity&#39;, position=&#39;dodge&#39;)+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) . Conclusão . Este doc é parte de um excelente curso de Machine Learning da Data Science Academy, Cap 02, estudo de caso em R apresentando técnicas de feature engineering. .",
            "url": "https://brunodeabreu.github.io/blog/2020/06/27/Feature-Engineering-R.Rmd",
            "relUrl": "/2020/06/27/Feature-Engineering-R.Rmd",
            "date": " • Jun 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Prevendo Temperatura com PyTorch utilizando simples NN",
            "content": "Motiva&#231;&#227;o . Na segunda semana do curso Deep Learning with PyTorch: Zero to GANs tive a oportunidade de trabalhar na construção de um modelo de regressão linear utilizando pytorch que realiza a predição de custo de seguro para um dataset oferecido pelo kaggle no desafio Insurance, meu notebook para esta atividade pode ser acessado no link . . Baseado nesta atividade escolhi outro dataset disponibilizado pelo kaggle para um desafio com 60 anos de dados extraidos do oceano, o nome do desafio denomiado CalCOFI The California Cooperative Oceanic Fisheries Investigations oferece dados de mais de 50 mil estações de coleta de amostragem, são dados físicos e quimicos que oferecem informações valiosas para explicar o clico climático da costa da Califórnia, tal pesquisa é tão importante que introduziu o termo El Niño conhecido hoje em dia. . Objetivo : . Objetivo deste notebook é documentar cada etapa do processo de construção do modelo de rede neural para predição de problemas de regressão linear, abordagem e passos assim como aplicado ao problema de Insurance pode ser replicado a outros problemas com dados separados linearmente. . Questionamento . Será que esta arquitetura de rede neural será capaz de separar esses dados para solucionar o problema ? . Passos : . A sequência utilizada para solucionar esse problema e construção da rede neural . Importação de bibliotecas, download doos dados e exploração: . Estas são algumas perguntas iniciais : . Quantas colunas temos no dataset ? | Quantas linhas ? | Quais as variáveis de entrada e target | Quais variáveis categóricas e numéricas ? | Qual a média e desvio padrão da amostra ? | Os dados estão normalizados | . | Preparação do Dataset . Conversão dos para para PyTorch tensors com tipo torch.float32 | Criar o PyTorch dataset e dataLoader para treino e validação | Selecionar o tamanho do batch de treinamento batch_size | Dividir os dados em Treino e Validação | . | Criação do modelo de Regressão Linear . O modelo que deverá extender a classe nn.Module precisa ter basicamente 6 métodos sendo os principais (foward, training e validation) | . | Treinamento do modelo . O principal passo para criação do modelo será a função de fit que será responsável por percorrer o dataset de treino , calcular as derivativas, o erro, otimizar e arquivar o resultado em uma lista para analise posterior. | . | Predições e avaliações . Etapa que se realiza a avaliação do treino em suas diversas etapas e caso satisfeito realize predições. | . | Step 1 : Importa&#231;&#227;o de bibliotecas, download doos dados e explora&#231;&#227;o: . Importação das bibliotecas para realizar a atividade. . #collapse-hide import torch import torchvision import torch.nn as nn import pandas as pd import matplotlib.pyplot as plt import torch.nn.functional as F from torchvision.datasets.utils import download_url from torch.utils.data import DataLoader, TensorDataset, random_split . . Como os dados foram armazenados no google drive foi preciso realizar o mount point para acessar via google colab. . #collapse-hide from google.colab import drive drive.mount(&#39;/content/drive&#39;) . . Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&amp;response_type=code&amp;scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly Enter your authorization code: ·········· Mounted at /content/drive . Para analise inicial e exploração utilizei o Pandas para importar os dados no formato de dataframe, nos steps seguintes será preciso converter para o formato Tensor para trabalhar com PyTorch. . #collapse-hide dataframe_raw = pd.read_csv(DATASET_PATH) dataframe_raw.head() . . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Loud Cover Pressure (millibars) Daily Summary . 0 2006-04-01 00:00:00.000 +0200 | Partly Cloudy | rain | 9.472222 | 7.388889 | 0.89 | 14.1197 | 251.0 | 15.8263 | 0.0 | 1015.13 | Partly cloudy throughout the day. | . 1 2006-04-01 01:00:00.000 +0200 | Partly Cloudy | rain | 9.355556 | 7.227778 | 0.86 | 14.2646 | 259.0 | 15.8263 | 0.0 | 1015.63 | Partly cloudy throughout the day. | . 2 2006-04-01 02:00:00.000 +0200 | Mostly Cloudy | rain | 9.377778 | 9.377778 | 0.89 | 3.9284 | 204.0 | 14.9569 | 0.0 | 1015.94 | Partly cloudy throughout the day. | . 3 2006-04-01 03:00:00.000 +0200 | Partly Cloudy | rain | 8.288889 | 5.944444 | 0.83 | 14.1036 | 269.0 | 15.8263 | 0.0 | 1016.41 | Partly cloudy throughout the day. | . 4 2006-04-01 04:00:00.000 +0200 | Mostly Cloudy | rain | 8.755556 | 6.977778 | 0.83 | 11.0446 | 259.0 | 15.8263 | 0.0 | 1016.51 | Partly cloudy throughout the day. | . Trabalhando com as colunas foi optado por dropar a coluna formatted Date, em muitos projetos dados de data são muito importantes pois podem ser convertidos e extraído informações como dias da semana, feriado, final de semana, etc. . #collapse-hide # Drop date dataframe_raw.drop(&#39;Formatted Date&#39;, axis=1, inplace=True) . . #collapse-hide dataframe_raw.columns . . Index([&#39;Summary&#39;, &#39;Precip Type&#39;, &#39;Temperature (C)&#39;, &#39;Apparent Temperature (C)&#39;, &#39;Humidity&#39;, &#39;Wind Speed (km/h)&#39;, &#39;Wind Bearing (degrees)&#39;, &#39;Visibility (km)&#39;, &#39;Loud Cover&#39;, &#39;Pressure (millibars)&#39;, &#39;Daily Summary&#39;], dtype=&#39;object&#39;) . Neste momento podemos observar que o dataset tem 1.060.983 linhas e 11 colunas sendo que é muito importanque que a coluna na qual deseja realizar a predição Temperature (C) não seja incluida na variável input_cols que será utilizada como entrada da rede neural. . #collapse-hide num_rows = dataframe_raw.size num_cols = dataframe_raw.columns.size input_cols = [&#39;Summary&#39;, &#39;Precip Type&#39;, &#39;Apparent Temperature (C)&#39;, &#39;Humidity&#39;, &#39;Wind Speed (km/h)&#39;, &#39;Wind Bearing (degrees)&#39;, &#39;Visibility (km)&#39;, &#39;Loud Cover&#39;, &#39;Pressure (millibars)&#39;, &#39;Daily Summary&#39;] print(f&#39;Number of rows : &#39;, num_rows) print(f&#39;Number of columns : &#39;, num_cols) print(f&#39;Input columns : &#39;, input_cols) . . Number of rows : 1060983 Number of columns : 11 Input columns : [&#39;Summary&#39;, &#39;Precip Type&#39;, &#39;Apparent Temperature (C)&#39;, &#39;Humidity&#39;, &#39;Wind Speed (km/h)&#39;, &#39;Wind Bearing (degrees)&#39;, &#39;Visibility (km)&#39;, &#39;Loud Cover&#39;, &#39;Pressure (millibars)&#39;, &#39;Daily Summary&#39;] . Importante dividir e destacar as variáveis categóricas e qual é o output_cols coluna que se deseja realizar a predição. . Neste dataset temos 3 colunas com dados do tipo categórico. . #collapse-hide categorical_cols = [&#39;Summary&#39;, &#39;Precip Type&#39;,&#39;Daily Summary&#39;] output_cols = [&#39;Temperature (C)&#39;] . . df .describe() . Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Loud Cover Pressure (millibars) . count 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.0 | 96453.000000 | . mean 11.932678 | 10.855029 | 0.734899 | 10.810640 | 187.509232 | 10.347325 | 0.0 | 1003.235956 | . std 9.551546 | 10.696847 | 0.195473 | 6.913571 | 107.383428 | 4.192123 | 0.0 | 116.969906 | . min -21.822222 | -27.716667 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | . 25% 4.688889 | 2.311111 | 0.600000 | 5.828200 | 116.000000 | 8.339800 | 0.0 | 1011.900000 | . 50% 12.000000 | 12.000000 | 0.780000 | 9.965900 | 180.000000 | 10.046400 | 0.0 | 1016.450000 | . 75% 18.838889 | 18.838889 | 0.890000 | 14.135800 | 290.000000 | 14.812000 | 0.0 | 1021.090000 | . max 39.905556 | 39.344444 | 1.000000 | 63.852600 | 359.000000 | 16.100000 | 0.0 | 1046.380000 | . Continuando com a exploração do dataset, utilizo o seaborn.distplot para plotar a distribuição dos dados. . Pode-se observar que ele obedece uma distribuição Normal. . #collapse-hide import seaborn as sns sns.distplot(dataframe_raw[&#39;Temperature (C)&#39;]) . . /usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fe033be0438&gt; . Explorando se a variável target tem alguma relação linear com a variável humidade, como destacado no plot temos uma relação linear negativa, ou seja, quando a temperatura abaixa a humidade do ar aumenta. . #collapse-hide sns.lmplot(x=&quot;Humidity&quot;, y=&quot;Temperature (C)&quot;, data=df, order=2, ci=None); . . Step 2: Prepara&#231;&#227;o do Dataset . Esta função dataframe_to_arrays recebe como argumento o dataframe e utiliza da biblioteca numpy para converter as colunas de formato texto para datados categóricos para assim utilizar o método .cat.codes que associará a cada valor categórico um código. . Por fim ela converte os dados na input_cols e output_cols para o formato de array utilizando to_numpy() e retorna os dois arrays inputs_array e targets_array . #collapse-hide import numpy as np def dataframe_to_arrays(dataframe): # Make a copy of the original dataframe dataframe1 = dataframe.copy(deep=True) # Convert non-numeric categorical columns to numbers for col in categorical_cols: dataframe1[col] = dataframe1[col].astype(&#39;category&#39;).cat.codes # Extract input &amp; outupts as numpy arrays inputs_array = dataframe1[input_cols].to_numpy() targets_array = dataframe1[output_cols].to_numpy() return inputs_array, targets_array . . #collapse-hide inputs_array, targets_array = dataframe_to_arrays(df) inputs_array, targets_array . . (array([[ 19. , 0. , 7.38888889, ..., 0. , 1015.13 , 197. ], [ 19. , 0. , 7.22777778, ..., 0. , 1015.63 , 197. ], [ 17. , 0. , 9.37777778, ..., 0. , 1015.94 , 197. ], ..., [ 19. , 0. , 22.03888889, ..., 0. , 1015.66 , 170. ], [ 19. , 0. , 21.52222222, ..., 0. , 1015.95 , 170. ], [ 19. , 0. , 20.43888889, ..., 0. , 1016.16 , 170. ]]), array([[ 9.47222222], [ 9.35555556], [ 9.37777778], ..., [22.03888889], [21.52222222], [20.43888889]])) . Como destacado na sequencia de passaos [e importante converter os dados do para o formato de Tensor para ser utilizado pelo PyTorch. . Destaco a necessidade de converter com tipo torch.float32, o pytorch como documentado na documentação torch.tensors precisa trabalhar com tipo float e float64 é um double tensor que não se aplica neste caso. Por isso a utilização de float32. . #collapse-hide inputs = torch.from_numpy(inputs_array).type(torch.float32) targets = torch.from_numpy(targets_array).type(torch.float32) inputs.dtype, targets.dtype . . (torch.float32, torch.float32) . Nesta etapa do projeto precisamos preparar o dataset para treinamento, utilizando TensorDataset convertemos cada exemplo em um vetor 1D. . #collapse-hide dataset = TensorDataset(inputs, targets) . . A divisão dos dados em Treino e Validação é uma etapa muito importante, em muitos artigos e projetos de data science podemos ver a recomendação de 30/70, ou seja, a divisão de 30% para validação as vezes chamado como teste e 70% de treino. Como neste projeto temos 1M de dados não faz sentido utilizar tantos dados para validação, para este exemplo foi escolhido utilizar 10% dos dados para validação utilizando um modelo de divisão randomica . #collapse-hide val_percent = 0.1 num_rows = len(df) num_cols = len(df.columns) val_size = int(num_rows * val_percent) train_size = num_rows - val_size train_ds, val_ds = random_split(dataset, [train_size, val_size]) # Use the random_split function to split dataset into 2 parts of the desired length . . A variável batch_size será utilizada para dividir os dados na hora do treinamento, para isso criamos o train_loader e val_loader . . Na documentação do PyTorch torch.utils.data o DataLoader é o coração do PyTorch, ele realizará toda iteração do dataset, neste caso o parametro Shuffle=True irá &quot;embaralhar&quot; os dados a cada epoch. . batch_size = 32 . #collapse-hide train_loader = DataLoader(train_ds, batch_size, shuffle=True) val_loader = DataLoader(val_ds, batch_size) . . Step 3 : Cria&#231;&#227;o do modelo de Regress&#227;o Linear . #collapse-hide input_size = len(input_cols) output_size = len(output_cols) input_size,output_size . . (10, 1) . A classe CALCOFI_Model define os métodos que definie o modelo . init : No método construtor cria-se o objeto linear a partir do nn.Linear que recebe dois parametros : Input e Output . | foward : O médodo forward recebe o input e retorna o output . | training_step : No step de treinamento é extraido do batch o input e target e calculado o erro , no caso abaixo utilizei o l1_loss, neste link Loss Function temos a documentação de todas as opções de loss do PyTorch. . | validation_Step : Similar ao realizado no treinamento o passo de validação faz o cáculo de loss no dataset de validação . | validation_epoch_end : Este médodo consolida os calulos da epoch para ser apresentado . | epoch_end : Apresenta o resultado a cada 20 epochs . | . class CAlCOFI_Model(nn.Module): def __init__(self): super().__init__() self.linear = nn.Linear(input_size, output_size) def forward(self, xb): out = self.linear(xb) return out def training_step(self, batch): inputs, targets = batch # Generate predictions out = self(inputs) # Calcuate loss loss = F.l1_loss(out,targets) return loss def validation_step(self, batch): inputs, targets = batch # Generate predictions out = self(inputs) # Calculate loss loss = F.l1_loss(out,targets) return {&#39;val_loss&#39;: loss.detach()} def validation_epoch_end(self, outputs): batch_losses = [x[&#39;val_loss&#39;] for x in outputs] epoch_loss = torch.stack(batch_losses).mean() return {&#39;val_loss&#39;: epoch_loss.item()} def epoch_end(self, epoch, result, num_epochs): # Print result every 20th epoch if (epoch+1) % 20 == 0 or epoch == num_epochs-1: print(&quot;Epoch [{}], val_loss: {:.4f}&quot;.format(epoch+1, result[&#39;val_loss&#39;])) model = CAlCOFI_Model() . Estes são os parametros do modelo : . #collapse-hide list(model.parameters()) . . [Parameter containing: tensor([[ 0.1257, 0.2043, 0.1329, -0.0199, 0.2992, -0.1360, 0.0997, 0.1371, 0.1450, 0.1588]], requires_grad=True), Parameter containing: tensor([0.3016], requires_grad=True)] . Step 4 : Treinamento do modelo . Para realizar o treinamento temos dois métodos: . evaluate : Método de avaliação do modelo . | fit : Método onde o treinamento acontece, ele recebe diversos parametros como: . epochs : número de epochs | lr : learning rate | model : modelo | train_loader : dataset preparado para treino | val_loader : dataset preparado para validação | opt_func : função de otimização, neste exercício será utilizado o torch.optin.SGD, que implementa o método de otimização de gradiente descendente. Neste link temos diversos outros métodos de otimização torch.optim | . | . o Fit é composto de 3 seguimentos: . 1 - Lista history que armazena o resultado por epoch . 2 - optimizer que faz a otimiza,ão do modelo com base nos parametros e learning rate . 3 - Primeiro loop for que percorre cada epoch e um segundo loop for interno que percorre o train_loader por batch, calculando o loss o slope e assim é realizado a otimização , ao final é feita a avaliação da epoch e armazenado o resultado no history . def evaluate(model, val_loader): outputs = [model.validation_step(batch) for batch in val_loader] return model.validation_epoch_end(outputs) def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD): history = [] optimizer = opt_func(model.parameters(), lr) for epoch in range(epochs): # Training Phase for batch in train_loader: loss = model.training_step(batch) loss.backward() optimizer.step() optimizer.zero_grad() # Validation phase result = evaluate(model, val_loader) model.epoch_end(epoch, result, epochs) history.append(result) return history . ##collapse-hide result = evaluate(model,val_loader ) # Use the the evaluate function print(result) . {&#39;val_loss&#39;: 136.86151123046875} . Neste primeiro ciclo de treinamento criado o history1 composto de 10 epochs e um learning rate de 1e-2, podemos observar que o erro no validation é bem alto val_loss: 8791.4219 . epochs = 10 lr = 1e-2 history1 = fit(epochs, lr, model, train_loader, val_loader) . Epoch [10], val_loss: 8791.4219 . No segundo ciclo de expeerimento adicionei mais epochs, para um total de 30 com o mesmo learning rate, ao final de 30 epochs o obtive o seguinte val_loss: 3514.0930, importante ver que tive um certo &quot;salto&quot; grande entre o erro de 20 para 30 epochs, o que indica que devo diminuir o learning rate . epochs = 30 lr = 1e-2 history2 = fit(epochs, lr, model, train_loader, val_loader) . Epoch [20], val_loss: 6955.5908 Epoch [30], val_loss: 3514.0930 . Aumentando o número de epochs para 100 e diminuindo o learning rate para 1e-6 tivemos um decrescimo do learning rate sem saltos grandes o que indica que o modelo foi aprendendo aos poucos . epochs = 100 lr = 1e-6 history3 = fit(epochs, lr, model, train_loader, val_loader) . Epoch [20], val_loss: 15.2285 Epoch [40], val_loss: 13.2498 Epoch [60], val_loss: 11.3344 Epoch [80], val_loss: 9.4787 Epoch [100], val_loss: 7.7381 . Step 5 : Avalia&#231;&#227;o do Modelo e Predi&#231;&#227;o . Para avaliação do erro de treinamento por epoch foi criado a função plot_losses . def plot_losses(history): losses = [x[&#39;val_loss&#39;] for x in history] plt.plot(losses, &#39;-x&#39;) plt.xlabel(&#39;epoch&#39;) plt.ylabel(&#39;loss&#39;) plt.title(&#39;Loss vs. No. of epochs&#39;) . #collapse-hide loss = [] for value in history1+history2+history3: loss.append(value[&#39;val_loss&#39;]) plt.xlabel(&#39;epoch&#39;) plt.ylabel(&#39;loss&#39;) plt.title(&#39;loss vs. No. of epochs&#39;); plt.plot(loss) . . [&lt;matplotlib.lines.Line2D at 0x7fe030df8dd8&gt;] . Pode-se observar que o modelo foi aprendendo aos pocuso e errando cada vez menos . plot_losses(history3) . Para realizar a predição foi criado a função predict_single que recebe como parametro o input o target e o modelo . def predict_single(input, target, model): inputs = input.unsqueeze(0) predictions = model(inputs) prediction = predictions[0].detach() print(&quot;Input:&quot;, input) print(&quot;Target:&quot;, target) print(&quot;Prediction:&quot;, prediction) . Nos dois exemplos a seguir podemos ver que o modelo erro muito inferindo uma temperatura de -10.77 quando foi 12.26, e 17.9 quando foi 8.91 . input, target = val_ds[2] predict_single(input, target, model) . Input: tensor([1.7000e+01, 0.0000e+00, 1.2267e+01, 9.3000e-01, 2.7451e+01, 1.5000e+02, 1.1978e+01, 0.0000e+00, 1.0155e+03, 1.1100e+02]) Target: tensor([12.2667]) Prediction: tensor([-10.7706]) . input, target = val_ds[10] predict_single(input, target, model) . Input: tensor([1.9000e+01, 0.0000e+00, 8.9167e+00, 5.7000e-01, 4.6046e+00, 2.0000e+01, 1.6100e+01, 0.0000e+00, 1.0219e+03, 1.8100e+02]) Target: tensor([8.9167]) Prediction: tensor([17.9243]) . Conclus&#227;o . Pode-se observar que a mesma abordagem para solucionar o problema de insuranse foi utilizada para o problema de temperatura, porém este precisa de alguns ajustes e testes como , aumentar o número de layears, treinar por mais tempo e mais epochs. .",
            "url": "https://brunodeabreu.github.io/blog/pytorch/deep%20learning/2020/06/21/Prevendo-Temperatura.html",
            "relUrl": "/pytorch/deep%20learning/2020/06/21/Prevendo-Temperatura.html",
            "date": " • Jun 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Descobrindo 5 funções no Pytorch",
            "content": ". Prevendo Temperatura . Utilizando PyTorch crio uma rede neural simples para tentar realizar a predição de temperatura com dados do oceno, neste notebook/post explico cada etapa do processo de criação de uma rede neural simples com base no conteúdo aprendido no curso de Deep Learning with PyTorch:Zero to GANs, oferecido pela @freeCodeCamp junto com @JovianML . toc: true | badges: true | comments: true | categories: [pytorch, deep learning] | image: images/chart-preview.png | . Fun&#231;&#245;es estudadas neste notebook . torch.chain_matmul | torch.cumprod | torch.det | torch.flatten | torch.lu | . Imports . Como neste notebook vou explorar 5 funções do pytorch nesta sessão de Imports foi importado somente a lib torch . #collapse-hide # Import torch and other required modules import torch . . Para descobrir novas funções utilizei o comando dir(&lt;lib&gt;) que listou todas as funções e o comando help(torch.&lt;func&gt;) para conhecer mais sobre ela. . Primeira fun&#231;&#227;o - torch.chain_matmul . Uma das atividades mais utilizadas em Deep Learning é a multiplicação de matrizes e uma das funções que o Pytorch nos oferece para esta atividade é o matmul , onde nos oferece a oportundiade de realizar o produtor de 2 tensores. . Nesta primeira função eu destaco a função chain_matmul que pode ser utilizada para realizar produtos de N tensors . Criamos 3 matrizes 2x2 utilizando a função torch.randn . #collapse-show # Example 1 - working matrix1 = torch.randn(3, 4) matrix2 = torch.randn(4, 5) matrix3 = torch.randn(5, 6) # Sample [matrix3, matrix1] . . [tensor([[-1.0494, 0.4786, -0.2496, -0.9682, -1.1614, -1.6895], [ 0.4752, -0.0841, -1.4004, 0.0402, -0.5590, -0.9405], [ 0.5449, 1.5989, 0.5870, -1.2225, -0.3488, -0.2063], [ 2.5068, -1.1578, 0.4410, -1.4279, 1.5589, -0.1604], [-0.0883, 1.3295, -1.4044, -0.6259, -1.1656, 0.1526]]), tensor([[ 2.8613, 0.3382, 0.3099, 0.7402], [-0.6262, -1.3056, 0.6018, -0.6395], [-0.9182, -0.1888, -0.2580, -0.0872]])] . Para realizar a multiplicação simplesmente passamos as 3 matrizes como argumento. . Detalhe sobre as matrizes : . matrix1 é uma matriz 3x4 : 3 linhas e 4 colunas | matrix2 é uma matriz 4x5 : 4 linhas e 5 colunas | matrix3 é uma matriz 5x6 : 5 linhas e 6 colunas | . O resultado dessa multiplicação é uma nova matriz 3x6, ou seja, 3 linhsa e 6 colunas. . #collapse-show # performing product torch.chain_matmul(matrix1, matrix2, matrix3) . . tensor([[-8.0324, -2.8931, 0.1645, 5.4147, -1.6135, -0.1331], [ 0.0715, -1.8514, -0.1220, 0.7759, 1.0616, 1.0326], [ 3.3314, 0.4199, 0.5218, -2.4496, 1.1681, -0.2269]]) . Um segundo exemplo utilizando 4 matrizes maiores . #collapse-show # Example 2 - working matrix1 = torch.randn(100,110) matrix2 = torch.randn(110,120) matrix3 = torch.randn(120,130) matrix4 = torch.randn(130,140) # Sample [matrix1, matrix2] . . [tensor([[-1.0113, 2.7251, 0.1640, ..., -1.1982, 0.2516, 2.3802], [-0.2575, 1.0712, -0.1683, ..., 0.0799, 0.1335, -0.2284], [-0.4726, 1.4036, -1.6088, ..., 0.3482, 0.6061, -0.0266], ..., [ 0.7878, 0.5653, -0.7980, ..., -0.6144, 0.7365, -1.5773], [-1.2001, -2.0501, 0.2104, ..., -1.2552, 0.2905, -0.4115], [ 0.7512, 1.0929, -0.1207, ..., -2.0084, -0.8357, -1.8306]]), tensor([[-1.0272, 1.3241, -0.7045, ..., 2.6188, 0.7776, 0.2609], [-2.2178, 0.2632, -1.0765, ..., 1.0710, -0.0811, -0.6641], [ 0.8842, -0.5080, 0.2268, ..., 0.1498, 0.2623, -1.1105], ..., [-1.0267, 0.8322, -1.3487, ..., -0.7979, -1.6696, -0.4104], [ 0.9523, -0.4135, -0.2482, ..., 0.6825, -1.1463, -0.7079], [ 0.0572, 0.5462, 0.4128, ..., 1.1507, 1.1007, 2.5236]])] . Neste exemplo mostro como a função é eficiente, levando apenas 3.94ms para realizar a multiplicação de todas as matrizes. . #collapse-show # performing product %time torch.chain_matmul(matrix1, matrix2, matrix3,matrix4) . . CPU times: user 3.14 ms, sys: 802 µs, total: 3.94 ms Wall time: 53.4 ms . tensor([[-1.0312e+03, 2.2024e+03, 8.7111e+02, ..., -1.6845e+03, -1.8864e+03, 2.1999e+03], [-2.6746e+03, -1.2506e+03, -6.2687e+02, ..., 1.6874e+03, 2.2933e+03, -2.3796e+02], [ 2.0759e+02, -1.3513e+03, -1.8177e+03, ..., -9.0427e+02, -1.5769e+03, 3.6219e+03], ..., [-3.3170e+01, 5.5390e+02, 4.1289e+02, ..., -1.4384e+03, 3.1857e+02, 5.0504e+03], [ 4.1570e+02, -1.2112e+03, 4.0855e+00, ..., -3.3088e+02, -3.1520e+02, -1.3502e+03], [ 3.5522e+03, -1.2904e+03, -3.7685e+02, ..., 1.6309e+02, -3.0861e+02, -3.3388e+02]]) . No terceiro exemplo destaco um exemplo de falha, tentando realizar multiplicação de matrizes com dimensões diferentes. . #collapse-show # Example 3 - breaking matrix1 = torch.randn(3, 4) matrix2 = torch.randn(4, 5, 4) # Sample [matrix2, matrix1] . . [tensor([[[-1.3402, -1.3130, -0.3395, 0.5945], [-0.0259, -0.1071, -1.1639, 1.0613], [-0.7485, -1.1593, -1.5075, -1.0894], [-1.3146, 2.8806, 0.2349, 0.2622], [ 1.0905, -0.5099, 1.3923, -0.8981]], [[-0.7263, -0.2341, -0.5183, 0.3943], [ 0.6819, 0.1342, 0.0794, -0.0281], [-1.4046, -1.2519, 0.4766, 0.3968], [ 0.0881, -0.9358, -1.5493, 0.1794], [-1.0300, 0.8201, -0.2617, 0.7340]], [[-0.7806, 1.0247, -0.5675, -0.1108], [-0.5045, -1.4726, 0.6898, -0.2458], [ 0.1259, -0.9895, 1.2314, 0.3145], [ 0.0806, 1.2443, -0.9222, 0.2020], [-0.6894, -0.1846, 0.5644, 0.1418]], [[ 0.3160, -0.3909, 0.5069, -2.4691], [ 0.2330, -1.4668, 0.9580, -0.2209], [ 1.1199, -0.7593, 0.7848, 0.5991], [-0.3350, -1.3236, -0.7181, 0.7984], [-1.2864, 1.1569, -1.7247, -0.4536]]]), tensor([[ 0.5584, 1.1150, -1.2637, 1.5120], [-0.3575, 1.1148, -1.4004, 2.1986], [-1.3665, 1.1424, 0.2155, -0.0970]])] . #collapse-show torch.chain_matmul(matrix1, matrix2) . . RuntimeError Traceback (most recent call last) &lt;ipython-input-18-fc1c9bb90b38&gt; in &lt;module&gt; 1 #collapse-show -&gt; 2 torch.chain_matmul(matrix1, matrix2) ~/anaconda3/lib/python3.7/site-packages/torch/functional.py in chain_matmul(*matrices) 740 .. _`[CLRS]`: https://mitpress.mit.edu/books/introduction-algorithms-third-edition 741 &#34;&#34;&#34; --&gt; 742 return torch._C._VariableFunctions.chain_matmul(matrices) 743 744 RuntimeError: Tensor dimension is 3, expected 2 instead. . Podemos ver que o output de erro do pytorch é bem explicativo, nos retornando que esperava um Tensor de 2D, duas dimensões e recebeu um Tensor 3D. . Segunda fun&#231;&#227;o - torch.cumprod . This second function returns the cumulative product of elements . Nesta segunda função gostaria de destacar a função torch.cumprod , onde o nome é bem intuitivo quanto sua ação, isto mesmo , esta função realiza produto comulativo de tensores. . Para exemplificar, neste primeiro exemplo crio um tensor de dois números randomicos e utilizo a função cumprod para realizar o produto. . #collapse-show # Example 1 - working nums = torch.randn(2) nums . . tensor([-0.9611, 0.5437]) . #collapse-show torch.cumprod(nums,dim=0) . . tensor([-0.9611, -0.5226]) . Como pode ser observar o segundo elemento foi substituido pelo produto entre os dois números, nesta função também utilizo o argumento dim=0, que indica a dimensão da multiplicação. . #collapse-show -0.9611 * 0.5437 . . -0.52255007 . Neste segundo exemplo utilizando ainda a função cumprod, vamos realizar o produto cumulativo entre um tensor 3x3 : . #collapse-show # Example 2 - working nums = torch.randn(3,3) nums . . tensor([[ 1.8956, -1.4917, -0.9016], [-0.8868, 0.2748, -0.2181], [ 0.5888, 0.2202, -0.9849]]) . #collapse-show torch.cumprod(nums,dim=1) . . tensor([[ 1.8956, -2.8277, 2.5494], [-0.8868, -0.2437, 0.0531], [ 0.5888, 0.1297, -0.1277]]) . Abaixo a multiplicação realizada manualmente, utilizando um tensor 3x3 , utilizando dim=1 , dimensão 1: . #collapse-show 1.8956 * -1.4917 * -0.9016 . . 2.549424134432 . No terceiro exemplo mostro como se especificar uma dimensão inexistente teremos o seguinte resultado. . #collapse-show # Example 3 - breaking nums = torch.randn(3,3) nums . . tensor([[ 0.7083, -1.3484, 2.3374], [-0.1800, -0.2821, 1.4368], [ 0.8014, -1.1346, -0.7196]]) . #collapse-show torch.cumprod(nums,dim=9) . . IndexError Traceback (most recent call last) &lt;ipython-input-121-f405a7ba577b&gt; in &lt;module&gt; -&gt; 1 torch.cumprod(nums,dim=9) IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 9) . Terceira fun&#231;&#227;o - torch.det . Esta terceira função é utilizada para calcular a determinante de uma matriz quadrada. . Por definição, uma matriz é considerada quadrada quando o número de colunas é igual ao número de linhas e esta associdada a um número que recebe a denominação de determinante . . Marcos Noe, no site brasilescola.uol.com.br, explica que : . . Note: O determinante de uma Matriz é dado pelo valor numérico resultante da subtração entre o somatório do produto dos termos da diagonal principal e do somatório do produto dos termos da diagonal secundária . # Example 1 - working a = torch.tensor([[2,9],[-1,6.]]) a . tensor([[ 2., 9.], [-1., 6.]]) . Neste primeiro exemplo tempos : . A diagonal principal 2,6, onde o produto é : 2 * 6 = 12 | A diagonal secundária -1,9 , o produto será : -1 * 9 = -9 | E por fim a soma : 12 - (-9) = 21 | . torch.det(a) . tensor(21.) . Neste segundo exemplo vamos ver uma matriz 3x3 . # Example 2 - working A = torch.randn(3, 3) A . tensor([[-0.1348, -1.0434, 0.0589], [ 0.2338, 1.0583, -0.1160], [-0.6723, 0.7773, 0.8919]]) . torch.det(A) . tensor(0.0493) . Como pytorch trabalha com valores em float não podemos apresentar valores inteiros para a função pois como documentado ela espera um valor do time float . # Example 3 - breaking b = torch.tensor([[2,9],[-1,6]]) b . tensor([[ 2, 9], [-1, 6]]) . torch.det(b) . RuntimeError Traceback (most recent call last) &lt;ipython-input-135-eaa77d970a4d&gt; in &lt;module&gt; -&gt; 1 torch.det(b) RuntimeError: Expected a floating point tensor as input . Quarta fun&#231;&#227;o - torch.flatten . Esta função é utilizada para transformar uma matriz em um vetor, ou seja, como demostrado no exemplo abaixo ela pega uma matriz 2x2 e transforma em um vetor unidimensional. . # Example 1 - working T = torch.tensor([[1, 2], [3, 4]]) T . tensor([[1, 2], [3, 4]]) . torch.flatten(T) . tensor([1, 2, 3, 4]) . Como podemos ver no segundo exemplo temos um tensor 2x2x2 , ou seja duas matrizes, neste caso ao realizar o flatten teremos o seguinte output: . # Example 2 - working T = torch.tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) T . tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) . torch.flatten(T, start_dim=1) . tensor([[1, 2, 3, 4], [5, 6, 7, 8]]) . Podemos utilizar como no exemplo o parametro start_dim para espeficicar a primera dimensão. . Abaixo teremos um exemplo onde não se pode aplicar o flatten quando range de dimensões não é válido. . # Example 3 - breaking T = torch.tensor([[1, 2], [3, 4]]) T . tensor([[1, 2], [3, 4]]) . torch.flatten(T, start_dim=2) . IndexError Traceback (most recent call last) &lt;ipython-input-165-f58365975ace&gt; in &lt;module&gt; -&gt; 1 torch.flatten(T, start_dim=2) IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 2) . Quinta fun&#231;&#227;o - torch.lu . A última função que destaco, mas não menos importante é a torch.lu , esta interessante função retorna uma tupla contendo LU factorization e pivots, no primeiro exemplo criamos um tensor 2x3x3 e aplicamos a função: . # Example 1 - working A = torch.randn(2, 3, 3) A_LU, pivots = torch.lu(A, pivot=True) A_LU . tensor([[[-0.8440, 0.3518, -0.0991], [ 0.6065, -1.2822, -1.2502], [-0.9766, 0.5978, -0.9145]], [[-0.4165, 1.0368, -0.7703], [ 0.3856, -0.8209, -0.9273], [-0.9241, -0.7736, -0.5355]]]) . pivots . tensor([[3, 3, 3], [2, 2, 3]], dtype=torch.int32) . A_LU, pivots, info = torch.lu(A, get_infos=True) if info.nonzero().size(0) == 0: print(&#39;LU factorization succeeded for all samples!&#39;) . LU factorization succeeded for all samples! . info . tensor([0, 0], dtype=torch.int32) . Como todo exemplo quero mostrar uma utilização com erro, como podemos ver algumas opção só estão disponiveis para processamento em GPU/CUDA. . # Example 3 - breaking A = torch.randn(2, 3, 3) A_LU, pivots = torch.lu(A, pivot=False) A_LU . RuntimeError Traceback (most recent call last) &lt;ipython-input-185-c3dc98d6d278&gt; in &lt;module&gt; 4 5 A = torch.randn(2, 3, 3) -&gt; 6 A_LU, pivots = torch.lu(A, pivot=False) 7 A_LU 8 /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/_jit_internal.py in fn(*args, **kwargs) 207 return if_true(*args, **kwargs) 208 else: --&gt; 209 return if_false(*args, **kwargs) 210 211 if if_true.__doc__ is None and if_false.__doc__ is not None: /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/functional.py in _lu_no_infos(A, pivot, get_infos, out) 1027 return handle_torch_function( 1028 lu, (A,), A, pivot=pivot, get_infos=get_infos, out=out) -&gt; 1029 result = _lu_impl(A, pivot, get_infos, out) 1030 if out is not None: 1031 _check_list_size(len(out), get_infos, out) /srv/conda/envs/notebook/lib/python3.7/site-packages/torch/functional.py in _lu_impl(A, pivot, get_infos, out) 993 &#34;&#34;&#34; 994 # If get_infos is True, then we don&#39;t need to check for errors and vice versa --&gt; 995 return torch._lu_with_info(A, pivot=pivot, check_errors=(not get_infos)) 996 997 def _check_list_size(out_len, get_infos, out): RuntimeError: lu without pivoting is not implemented on the CPU . Conclus&#227;o . Aprendi muito ao pesquisar as funções da lib torch, minha jornada em Deep Learning está no começo mas é muito estimulante ver como é facil a utilização e documentação, apesar do notebook ser uma lista de 5 funções tive o prazer de estudar diversas outras como torch.randn. . Este notebook é a parte da primeira aula do curso Zero to Gans oferecido pela @Jovian.ml e @freecodecamp, muito obrigado @aakashns pela brilhante aula. . Thank you @aakashns for the fantastic course. . Reference Links . Algumas referencias : . Official documentation for torch.Tensor: https://pytorch.org/docs/stable/tensors.html | . Video aula 1 - Zero To Gans . .",
            "url": "https://brunodeabreu.github.io/blog/pytorch/deep%20learning/2020/06/14/Descobrindo-5-Funcoes-Pytorch.html",
            "relUrl": "/pytorch/deep%20learning/2020/06/14/Descobrindo-5-Funcoes-Pytorch.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Doar Sangue salva vidas",
            "content": ". Doar sangue salva vidas, isso é divulgado nas mídias sociais, além de ser utilizado para procedimentos e intervenções médicas é utilizado no tratamento de diversas doenças crônicas. . Constantemente os bancos de sangue estão com estoques abaixo da normalidade, principalmente durantes os meses de férias. Com isso Ministério da Saúde reforça periodicamente a importância de adotar uma cultura solidária da doação regular e espontânea de sangue. Mas na prática poucos buscam os postos de doação de forma voluntária, normalmente é incentivado quando um parente ou amigo solicita doação. . Como a doação é voluntárias é difícil para os centros de hemoterapia e hospitais saberem quando um doador irá retornar para doar sangue . Explorando os dados . O dataset . Este conjunto de dados foi doado pelo Blood Transfusion Service Center na cidade de Hsin-Chu City em Taiwan em 2008, infelizmente não encontrei nenhuma fonte de dados abertos com algo similar. . Este dataset é disponibilizado pelo UCI-Blood Transfusion Service Center Data Set e 2019 drivendata.org promoveu uma competição com o tema Warm Up: Predict Blood Donations . #collapse-hide import pandas as pd . . #collapse-hide cols = [&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;target&#39;] df = pd.read_csv(&#39;data/transfusion.data&#39;, names=cols, header=0) df.head() . . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 748 entries, 0 to 747 Data columns (total 5 columns): rec 748 non-null int64 frec 748 non-null int64 total 748 non-null int64 time 748 non-null int64 target 748 non-null int64 dtypes: int64(5) memory usage: 29.3 KB . Descri&#231;&#227;o das Vari&#225;veis: . O dataset contem 749 linhas com dados de dodores com os seguintes dados: . rec : meses desde a última doação | fre: total número de doações | total : Total de sangue doado | time : meses desde primeira doação | target : Informação se foi doado ou não | . Explorando . df.head() . rec frec total time target . 0 | 2 | 50 | 12500 | 98 | 1 | . 1 | 0 | 13 | 3250 | 28 | 1 | . 2 | 1 | 16 | 4000 | 35 | 1 | . 3 | 2 | 20 | 5000 | 45 | 1 | . 4 | 1 | 24 | 6000 | 77 | 0 | . #collapse-hide df.total.value_counts() . . 250 158 500 112 750 87 1000 62 1250 62 1500 52 1750 43 2000 31 2250 24 2750 22 2500 14 3000 14 4000 13 3500 13 3250 9 3750 6 4250 4 6000 3 4750 2 5250 2 5500 2 5000 2 8250 1 12500 1 9500 1 11500 1 5750 1 8500 1 6500 1 4500 1 11000 1 10750 1 10250 1 Name: total, dtype: int64 . #collapse-show df.describe() . . rec frec total time target . count | 748.000000 | 748.000000 | 748.000000 | 748.000000 | 748.000000 | . mean | 9.506684 | 5.514706 | 1378.676471 | 34.282086 | 0.237968 | . std | 8.095396 | 5.839307 | 1459.826781 | 24.376714 | 0.426124 | . min | 0.000000 | 1.000000 | 250.000000 | 2.000000 | 0.000000 | . 25% | 2.750000 | 2.000000 | 500.000000 | 16.000000 | 0.000000 | . 50% | 7.000000 | 4.000000 | 1000.000000 | 28.000000 | 0.000000 | . 75% | 14.000000 | 7.000000 | 1750.000000 | 50.000000 | 0.000000 | . max | 74.000000 | 50.000000 | 12500.000000 | 98.000000 | 1.000000 | . #collapse-show df.total.value_counts(normalize=True).plot(kind=&#39;barh&#39;) plt.show() . . #collapse-hide df.groupby(&#39;frec&#39;)[&#39;total&#39;].mean() . . frec 1 250 2 500 3 750 4 1000 5 1250 6 1500 7 1750 8 2000 9 2250 10 2500 11 2750 12 3000 13 3250 14 3500 15 3750 16 4000 17 4250 18 4500 19 4750 20 5000 21 5250 22 5500 23 5750 24 6000 26 6500 33 8250 34 8500 38 9500 41 10250 43 10750 44 11000 46 11500 50 12500 Name: total, dtype: int64 . #collapse-hide import matplotlib.pyplot as plt import seaborn as sns . . Rela&#231;&#245;es . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb271dc50&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, hue=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26e7650&gt; . #collapse-show sns.lmplot(x=&#39;time&#39;, y=&#39;frec&#39;, col=&#39;target&#39;, data=df) . . &lt;seaborn.axisgrid.FacetGrid at 0x7ffbb26a9990&gt; . Residuais . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0d3c3d0&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c82810&gt; . #collapse-hide sns.residplot(x=&#39;time&#39;, y=&#39;frec&#39;, data=df, color=&#39;indianred&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0c037d0&gt; . Reg . #collapse-show plt.scatter(df.time, df.total, label=&#39;data&#39;, color=&#39;red&#39;, marker=&#39;o&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;blue&#39;, scatter=None, label=&#39;1st Order&#39;) sns.regplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df, color=&#39;green&#39;, order=2 ,scatter=None, label=&#39;2nd Order&#39;) . . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ffbb0be4d90&gt; . Distribui&#231;&#227;o Multivariada . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;total&#39;, data=df) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb0af1b10&gt; . #collapse-show sns.jointplot(x=&#39;time&#39;, y=&#39;rec&#39;, data=df, kind=&#39;kde&#39;) . . &lt;seaborn.axisgrid.JointGrid at 0x7ffbb099b050&gt; . Pairplot . #collapse-hide sns.pairplot(df) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffbb0a9a8d0&gt; . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide binned = fast_linbin(X, a, b, gridsize) / (delta * nobs) /home/bruno/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars FAC1 = 2*(np.pi*bw/RANGE)**2 . &lt;seaborn.axisgrid.PairGrid at 0x7ffba3ab9650&gt; . Feature Eng . #collapse-show df[&#39;time_frec&#39;] = df.time / df.frec df[&#39;time_rec&#39;] = df.time - df.rec df[&#39;total_time&#39;] = df.total / df.time df.sample(5) . . rec frec total time target time_frec time_rec total_time . 7 | 1 | 12 | 3000 | 35 | 0 | 2.916667 | 34 | 85.714286 | . 37 | 4 | 6 | 1500 | 16 | 1 | 2.666667 | 12 | 93.750000 | . 242 | 4 | 3 | 750 | 25 | 1 | 8.333333 | 21 | 30.000000 | . 49 | 2 | 2 | 500 | 2 | 0 | 1.000000 | 0 | 250.000000 | . 469 | 11 | 2 | 500 | 70 | 0 | 35.000000 | 59 | 7.142857 | . #collapse-hide sns.pairplot(df, hue=&#39;target&#39;) . . &lt;seaborn.axisgrid.PairGrid at 0x7ffba0e1d3d0&gt; . Save DataFrame to picckle . df.to_pickle(&#39;data/dados.pkl&#39;) . Modelagem . import pickle pickle_in = open(&quot;data/dados.pkl&quot;,&quot;rb&quot;) data = pickle.load(pickle_in) . x = data[[&#39;rec&#39;, &#39;frec&#39;, &#39;total&#39;, &#39;time&#39;, &#39;time_frec&#39;, &#39;time_rec&#39;,&#39;total_time&#39;]] y = data.target . # Split from sklearn.model_selection import train_test_split X_train, X_valid, y_train, y_valid = train_test_split(x, y, test_size=0.33, random_state=42) . GaussianNB - acc 70% . #collapse-show from sklearn import datasets from sklearn import metrics from sklearn.naive_bayes import GaussianNB # Classificador clf = GaussianNB() # Modelo modelo = clf.fit(X_train, y_train) print(modelo) # Previsões previsto = modelo.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . GaussianNB(priors=None, var_smoothing=1e-09) precision recall f1-score support 0 0.77 0.85 0.81 181 1 0.43 0.30 0.35 66 accuracy 0.70 247 macro avg 0.60 0.58 0.58 247 weighted avg 0.68 0.70 0.69 247 [[154 27] [ 46 20]] . Logistic Regression - acc 74% . #collapse-show from sklearn.linear_model import LogisticRegressionCV from sklearn import metrics #classifier clf = LogisticRegressionCV(cv=5, random_state=0).fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . LogisticRegressionCV(Cs=10, class_weight=None, cv=5, dual=False, fit_intercept=True, intercept_scaling=1.0, l1_ratios=None, max_iter=100, multi_class=&#39;warn&#39;, n_jobs=None, penalty=&#39;l2&#39;, random_state=0, refit=True, scoring=None, solver=&#39;lbfgs&#39;, tol=0.0001, verbose=0) precision recall f1-score support 0 0.75 0.98 0.85 181 1 0.60 0.09 0.16 66 accuracy 0.74 247 macro avg 0.67 0.53 0.50 247 weighted avg 0.71 0.74 0.66 247 [[177 4] [ 60 6]] . SVM - acc 73% . #collapse-show from sklearn import svm from sklearn import metrics #classifier clf = svm.SVC().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto_deprecated&#39;, kernel=&#39;rbf&#39;, max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) precision recall f1-score support 0 0.74 0.97 0.84 181 1 0.50 0.09 0.15 66 accuracy 0.73 247 macro avg 0.62 0.53 0.50 247 weighted avg 0.68 0.73 0.66 247 [[175 6] [ 60 6]] . /home/bruno/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . Tree - acc 67% . #collapse-show from sklearn import tree #classifier clf = tree.DecisionTreeClassifier().fit(X_train, y_train) print(clf) # Previsões previsto = clf.predict(X_valid) # Sumário print(metrics.classification_report(y_valid, previsto)) print(metrics.confusion_matrix(y_valid, previsto)) . . DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=False, random_state=None, splitter=&#39;best&#39;) precision recall f1-score support 0 0.76 0.81 0.78 181 1 0.36 0.29 0.32 66 accuracy 0.67 247 macro avg 0.56 0.55 0.55 247 weighted avg 0.65 0.67 0.66 247 [[147 34] [ 47 19]] .",
            "url": "https://brunodeabreu.github.io/blog/jupyter/2020/03/29/Doacao-Sangue.html",
            "relUrl": "/jupyter/2020/03/29/Doacao-Sangue.html",
            "date": " • Mar 29, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Formado em ciência da computação e estudante de estatística, sou um entusiasta em ciência de dados, inteligência artificial, machine learning e deep learning, tópicos que estudo diariamente. .",
          "url": "https://brunodeabreu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://brunodeabreu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}